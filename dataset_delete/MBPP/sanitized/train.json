[
    {
        "original_question": "Write a function to find the shared elements from the given two lists.",
        "answer": "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) ",
        "input": "",
        "test": [
            "assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
            "assert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))",
            "assert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the shared elements from the given two lists.\nTest Example: assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to identify non-prime numbers.",
        "answer": "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result",
        "input": "",
        "test": [
            "assert is_not_prime(2) == False",
            "assert is_not_prime(10) == True",
            "assert is_not_prime(35) == True",
            "assert is_not_prime(37) == False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to identify non-prime numbers.\nTest Example: assert is_not_prime(2) == False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums",
        "input": "",
        "test": [
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nTest Example: assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to check whether the two numbers differ at one bit position only or not.",
        "answer": "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)",
        "input": "",
        "test": [
            "assert differ_At_One_Bit_Pos(13,9) == True",
            "assert differ_At_One_Bit_Pos(15,8) == False",
            "assert differ_At_One_Bit_Pos(2,4) == False",
            "assert differ_At_One_Bit_Pos(2, 3) == True",
            "assert differ_At_One_Bit_Pos(5, 1) == True",
            "assert differ_At_One_Bit_Pos(1, 5) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check whether the two numbers differ at one bit position only or not.\nTest Example: assert differ_At_One_Bit_Pos(13,9) == True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find all words which are at least 4 characters long in a string.",
        "answer": "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))",
        "input": "",
        "test": [
            "assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
            "assert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])",
            "assert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find all words which are at least 4 characters long in a string.\nTest Example: assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find squares of individual elements in a list.",
        "answer": "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums",
        "input": "",
        "test": [
            "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
            "assert square_nums([10,20,30])==([100,400,900])",
            "assert square_nums([12,15])==([144,225])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find squares of individual elements in a list.\nTest Example: assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "answer": "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n ",
        "input": "",
        "test": [
            "assert find_Rotations(\"aaaa\") == 1",
            "assert find_Rotations(\"ab\") == 2",
            "assert find_Rotations(\"abc\") == 3"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nTest Example: assert find_Rotations(\"aaaa\") == 1\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to remove first and last occurrence of a given character from the string.",
        "answer": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
        "input": "",
        "test": [
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
            "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to remove first and last occurrence of a given character from the string.\nTest Example: assert remove_Occ(\"hello\",\"l\") == \"heo\"\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "answer": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
        "input": "",
        "test": [
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to sort a given matrix in ascending order according to the sum of its rows.\nTest Example: assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the volume of a triangular prism.",
        "answer": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ",
        "input": "",
        "test": [
            "assert find_Volume(10,8,6) == 240",
            "assert find_Volume(3,2,2) == 6",
            "assert find_Volume(1,2,1) == 1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the volume of a triangular prism.\nTest Example: assert find_Volume(10,8,6) == 240\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "answer": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "input": "",
        "test": [
            "assert text_lowercase_underscore(\"aab_cbbbc\")==(True)",
            "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)",
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nTest Example: assert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that returns the perimeter of a square given its side length as input.",
        "answer": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter",
        "input": "",
        "test": [
            "assert square_perimeter(10)==40",
            "assert square_perimeter(5)==20",
            "assert square_perimeter(4)==16"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that returns the perimeter of a square given its side length as input.\nTest Example: assert square_perimeter(10)==40\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to remove characters from the first string which are present in the second string.",
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "input": "",
        "test": [
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to remove characters from the first string which are present in the second string.\nTest Example: assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find whether a given array of integers contains any duplicate element.",
        "answer": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ",
        "input": "",
        "test": [
            "assert test_duplicate(([1,2,3,4,5]))==False",
            "assert test_duplicate(([1,2,3,4, 4]))==True",
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find whether a given array of integers contains any duplicate element.\nTest Example: assert test_duplicate(([1,2,3,4,5]))==False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check if the given number is woodball or not.",
        "answer": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False",
        "input": "",
        "test": [
            "assert is_woodall(383) == True",
            "assert is_woodall(254) == False",
            "assert is_woodall(200) == False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check if the given number is woodball or not.\nTest Example: assert is_woodall(383) == True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to check if a given number is one less than twice its reverse.",
        "answer": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
        "input": "",
        "test": [
            "assert check(70) == False",
            "assert check(23) == False",
            "assert check(73) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check if a given number is one less than twice its reverse.\nTest Example: assert check(70) == False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the largest number that can be formed with the given list of digits.",
        "answer": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
        "input": "",
        "test": [
            "assert find_Max_Num([1,2,3]) == 321",
            "assert find_Max_Num([4,5,6,1]) == 6541",
            "assert find_Max_Num([1,2,3,9]) == 9321"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the largest number that can be formed with the given list of digits.\nTest Example: assert find_Max_Num([1,2,3]) == 321\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to check whether the given two integers have opposite sign or not.",
        "answer": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
        "input": "",
        "test": [
            "assert opposite_Signs(1,-2) == True",
            "assert opposite_Signs(3,2) == False",
            "assert opposite_Signs(-10,-10) == False",
            "assert opposite_Signs(-2,2) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check whether the given two integers have opposite sign or not.\nTest Example: assert opposite_Signs(1,-2) == True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the nth octagonal number.",
        "answer": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
        "input": "",
        "test": [
            "assert is_octagonal(5) == 65",
            "assert is_octagonal(10) == 280",
            "assert is_octagonal(15) == 645"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the nth octagonal number.\nTest Example: assert is_octagonal(5) == 65\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
        "input": "",
        "test": [
            "assert count_Substrings('112112') == 6",
            "assert count_Substrings('111') == 6",
            "assert count_Substrings('1101112') == 12"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to count the number of substrings with the sum of digits equal to their length.\nTest Example: assert count_Substrings('112112') == 6\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find smallest number in a list.",
        "answer": "def smallest_num(xs):\n  return min(xs)\n",
        "input": "",
        "test": [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find smallest number in a list.\nTest Example: assert smallest_num([10, 20, 1, 45, 99]) == 1\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "answer": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
        "input": "",
        "test": [
            "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
            "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
            "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the maximum difference between available pairs in the given tuple list.\nTest Example: assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to sort a list of tuples using the second value of each tuple.",
        "answer": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
        "input": "",
        "test": [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to sort a list of tuples using the second value of each tuple.\nTest Example: assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to flatten a list and sum all of its elements.",
        "answer": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
        "input": "",
        "test": [
            "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
            "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
            "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to flatten a list and sum all of its elements.\nTest Example: assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to count the number of positive numbers in a list.",
        "answer": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
        "input": "",
        "test": [
            "assert pos_count([1,-2,3,-4]) == 2",
            "assert pos_count([3,4,5,-1]) == 3",
            "assert pos_count([1,2,3,4]) == 4"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to count the number of positive numbers in a list.\nTest Example: assert pos_count([1,-2,3,-4]) == 2\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "answer": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
        "input": "",
        "test": [
            "assert bell_number(2)==2",
            "assert bell_number(10)==115975",
            "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the number of ways to partition a set of Bell numbers.\nTest Example: assert bell_number(2)==2\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to check whether the given array is monotonic or not.",
        "answer": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "input": "",
        "test": [
            "assert is_Monotonic([6, 5, 4, 4]) == True",
            "assert is_Monotonic([1, 2, 2, 3]) == True",
            "assert is_Monotonic([1, 3, 2]) == False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check whether the given array is monotonic or not.\nTest Example: assert is_Monotonic([6, 5, 4, 4]) == True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check whether a list contains the given sublist or not.",
        "answer": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set",
        "input": "",
        "test": [
            "assert is_sublist([2,4,3,5,7],[3,7])==False",
            "assert is_sublist([2,4,3,5,7],[4,3])==True",
            "assert is_sublist([2,4,3,5,7],[1,6])==False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check whether a list contains the given sublist or not.\nTest Example: assert is_sublist([2,4,3,5,7],[3,7])==False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find whether all the given tuples have equal length or not.",
        "answer": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1",
        "input": "",
        "test": [
            "assert get_equal([(11, 22, 33), (44, 55, 66)]) == True",
            "assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False",
            "assert get_equal([(1, 2), (3, 4)]) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find whether all the given tuples have equal length or not.\nTest Example: assert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to sort a list of elements.",
        "answer": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
        "input": "",
        "test": [
            "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
            "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
            "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to sort a list of elements.\nTest Example: assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
        "answer": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
        "input": "",
        "test": [
            "assert dif_Square(5) == True",
            "assert dif_Square(10) == False",
            "assert dif_Square(15) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check whether the given number can be represented as the difference of two squares or not.\nTest Example: assert dif_Square(5) == True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check whether it follows the sequence given in the patterns array.",
        "answer": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True",
        "input": "",
        "test": [
            "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check whether it follows the sequence given in the patterns array.\nTest Example: assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "answer": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res",
        "input": "",
        "test": [
            "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
            "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]",
            "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find tuples which have all elements divisible by k from the given list of tuples.\nTest Example: assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find whether a number is divisible by 11.",
        "answer": "def is_Diff(n): \n    return (n % 11 == 0) ",
        "input": "",
        "test": [
            "assert is_Diff (12345) == False",
            "assert is_Diff(1212112) == True",
            "assert is_Diff(1212) == False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find whether a number is divisible by 11.\nTest Example: assert is_Diff (12345) == False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to check whether the length of the word is odd or not.",
        "answer": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
        "input": "",
        "test": [
            "assert word_len(\"Hadoop\") == False",
            "assert word_len(\"great\") == True",
            "assert word_len(\"structure\") == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check whether the length of the word is odd or not.\nTest Example: assert word_len(\"Hadoop\") == False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the nth tetrahedral number.",
        "answer": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6",
        "input": "",
        "test": [
            "assert tetrahedral_number(5) == 35",
            "assert tetrahedral_number(6) == 56",
            "assert tetrahedral_number(7) == 84"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the nth tetrahedral number.\nTest Example: assert tetrahedral_number(5) == 35\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the volume of a sphere.",
        "answer": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume",
        "input": "",
        "test": [
            "assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)",
            "assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)",
            "assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the volume of a sphere.\nTest Example: assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "answer": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
        "input": "",
        "test": [
            "assert get_Char(\"abc\") == \"f\"",
            "assert get_Char(\"gfg\") == \"t\"",
            "assert get_Char(\"ab\") == \"c\""
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nTest Example: assert get_Char(\"abc\") == \"f\"\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the nth number in the newman conway sequence.",
        "answer": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "input": "",
        "test": [
            "assert sequence(10) == 6",
            "assert sequence(2) == 1",
            "assert sequence(3) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the nth number in the newman conway sequence.\nTest Example: assert sequence(10) == 6\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the surface area of a sphere.",
        "answer": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea",
        "input": "",
        "test": [
            "assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)",
            "assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)",
            "assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the surface area of a sphere.\nTest Example: assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find nth centered hexagonal number.",
        "answer": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1",
        "input": "",
        "test": [
            "assert centered_hexagonal_number(10) == 271",
            "assert centered_hexagonal_number(2) == 7",
            "assert centered_hexagonal_number(9) == 217"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find nth centered hexagonal number.\nTest Example: assert centered_hexagonal_number(10) == 271\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to merge three dictionaries into a single dictionary.",
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict",
        "input": "",
        "test": [
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to merge three dictionaries into a single dictionary.\nTest Example: assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "answer": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count",
        "input": "",
        "test": [
            "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
            "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})",
            "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nTest Example: assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the closest smaller number than n.",
        "answer": "def closest_num(N):\n  return (N - 1)",
        "input": "",
        "test": [
            "assert closest_num(11) == 10",
            "assert closest_num(7) == 6",
            "assert closest_num(12) == 11"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the closest smaller number than n.\nTest Example: assert closest_num(11) == 10\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the length of the longest word.",
        "answer": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
        "input": "",
        "test": [
            "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
            "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the length of the longest word.\nTest Example: assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check if a string is present as a substring in a given list of string values.",
        "answer": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
        "input": "",
        "test": [
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check if a string is present as a substring in a given list of string values.\nTest Example: assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check whether the given number is undulating or not.",
        "answer": "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True",
        "input": "",
        "test": [
            "assert is_undulating(1212121) == True",
            "assert is_undulating(1991) == False",
            "assert is_undulating(121) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check whether the given number is undulating or not.\nTest Example: assert is_undulating(1212121) == True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to calculate the value of 'a' to the power 'b'.",
        "answer": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)",
        "input": "",
        "test": [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to calculate the value of 'a' to the power 'b'.\nTest Example: assert power(3,4) == 81\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
        "input": "",
        "test": [
            "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
            "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
            "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nTest Example: assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the length of the smallest list in a list of lists.",
        "answer": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
        "input": "",
        "test": [
            "assert Find_Min_Length([[1],[1,2]]) == 1",
            "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
            "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the length of the smallest list in a list of lists.\nTest Example: assert Find_Min_Length([[1],[1,2]]) == 1\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the number of divisors of a given integer.",
        "answer": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
        "input": "",
        "test": [
            "assert divisor(15) == 4",
            "assert divisor(12) == 6",
            "assert divisor(9) == 3"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the number of divisors of a given integer.\nTest Example: assert divisor(15) == 4\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
        "answer": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n",
        "input": "",
        "test": [
            "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
            "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
            "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nTest Example: assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "answer": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
        "input": "",
        "test": [
            "assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
            "assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)",
            "assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to multiply all the numbers in a list and divide with the length of the list.\nTest Example: assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "answer": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
        "input": "",
        "test": [
            "assert decimal_to_binary(8) == '1000'",
            "assert decimal_to_binary(18) == '10010'",
            "assert decimal_to_binary(7) == '111'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nTest Example: assert decimal_to_binary(8) == '1000'\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
        "input": "",
        "test": [
            "assert next_smallest_palindrome(99)==101",
            "assert next_smallest_palindrome(1221)==1331",
            "assert next_smallest_palindrome(120)==121"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nTest Example: assert next_smallest_palindrome(99)==101\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the kth element in the given array using 1-based indexing.",
        "answer": "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]",
        "input": "",
        "test": [
            "assert kth_element([12,3,5,7,19], 2) == 3",
            "assert kth_element([17,24,8,23], 3) == 8",
            "assert kth_element([16,21,25,36,4], 4) == 36"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the kth element in the given array using 1-based indexing.\nTest Example: assert kth_element([12,3,5,7,19], 2) == 3\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to convert a snake case string to camel case string.",
        "answer": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "input": "",
        "test": [
            "assert snake_to_camel('python_program')=='PythonProgram'",
            "assert snake_to_camel('python_language')==('PythonLanguage')",
            "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert a snake case string to camel case string.\nTest Example: assert snake_to_camel('python_program')=='PythonProgram'\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the Eulerian number a(n, m).",
        "answer": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "input": "",
        "test": [
            "assert eulerian_num(3, 1) == 4",
            "assert eulerian_num(4, 1) == 11",
            "assert eulerian_num(5, 3) == 26"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the Eulerian number a(n, m).\nTest Example: assert eulerian_num(3, 1) == 4\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to sort each sublist of strings in a given list of lists.",
        "answer": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n",
        "input": "",
        "test": [
            "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
            "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to sort each sublist of strings in a given list of lists.\nTest Example: assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to count true booleans in the given list.",
        "answer": "def count(lst):   \n    return sum(lst) ",
        "input": "",
        "test": [
            "assert count([True,False,True]) == 2",
            "assert count([False,False]) == 0",
            "assert count([True,True,True]) == 3"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to count true booleans in the given list.\nTest Example: assert count([True,False,True]) == 2\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to append the given list to the given tuples.",
        "answer": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ",
        "input": "",
        "test": [
            "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
            "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
            "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to append the given list to the given tuples.\nTest Example: assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to merge three lists into a single sorted list.",
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)",
        "input": "",
        "test": [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to merge three lists into a single sorted list.\nTest Example: assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "answer": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
        "input": "",
        "test": [
            "assert odd_Equivalent(\"011001\",6) == 3",
            "assert odd_Equivalent(\"11011\",5) == 4",
            "assert odd_Equivalent(\"1010\",4) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nTest Example: assert odd_Equivalent(\"011001\",6) == 3\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the common elements in given nested lists.",
        "answer": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result",
        "input": "",
        "test": [
            "assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
            "assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])",
            "assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the common elements in given nested lists.\nTest Example: assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check if a string represents an integer or not.",
        "answer": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False",
        "input": "",
        "test": [
            "assert check_integer(\"python\")==False",
            "assert check_integer(\"1\")==True",
            "assert check_integer(\"12345\")==True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check if a string represents an integer or not.\nTest Example: assert check_integer(\"python\")==False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check whether all dictionaries in a list are empty or not.",
        "answer": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit",
        "input": "",
        "test": [
            "assert empty_dit([{},{},{}])==True",
            "assert empty_dit([{1,2},{},{}])==False",
            "assert empty_dit({})==True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check whether all dictionaries in a list are empty or not.\nTest Example: assert empty_dit([{},{},{}])==True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to convert a given tuple of positive integers into a single integer.",
        "answer": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result",
        "input": "",
        "test": [
            "assert tuple_to_int((1,2,3))==123",
            "assert tuple_to_int((4,5,6))==456",
            "assert tuple_to_int((5,6,7))==567"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert a given tuple of positive integers into a single integer.\nTest Example: assert tuple_to_int((1,2,3))==123\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to convert all possible convertible elements in a list of lists to floats.",
        "answer": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res",
        "input": "",
        "test": [
            "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]",
            "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]",
            "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert all possible convertible elements in a list of lists to floats.\nTest Example: assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to convert a string to a list of strings split on the space character.",
        "answer": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
        "input": "",
        "test": [
            "assert string_to_list(\"python programming\")==['python','programming']",
            "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
            "assert string_to_list(\"write a program\")==['write','a','program']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert a string to a list of strings split on the space character.\nTest Example: assert string_to_list(\"python programming\")==['python','programming']\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the element that appears only once in a sorted array.",
        "answer": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
        "input": "",
        "test": [
            "assert search([1,1,2,2,3]) == 3",
            "assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8",
            "assert search([1,2,2,3,3,4,4]) == 1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the element that appears only once in a sorted array.\nTest Example: assert search([1,1,2,2,3]) == 3\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "answer": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max",
        "input": "",
        "test": [
            "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
            "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
            "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nTest Example: assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "answer": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)",
        "input": "",
        "test": [
            "assert amicable_numbers_sum(999)==504",
            "assert amicable_numbers_sum(9999)==31626",
            "assert amicable_numbers_sum(99)==0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to sum all amicable numbers from 1 to a specified number.\nTest Example: assert amicable_numbers_sum(999)==504\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to get the angle of a complex number.",
        "answer": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle",
        "input": "",
        "test": [
            "assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)",
            "assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)",
            "assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to get the angle of a complex number.\nTest Example: assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "answer": "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0",
        "input": "",
        "test": [
            "assert find_length(\"11000010001\") == 6",
            "assert find_length(\"10111\") == 1",
            "assert find_length(\"11011101100101\") == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nTest Example: assert find_length(\"11000010001\") == 6\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the sum of common divisors of two given numbers.",
        "answer": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
        "input": "",
        "test": [
            "assert sum(10,15) == 6",
            "assert sum(100,150) == 93",
            "assert sum(4,6) == 3"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the sum of common divisors of two given numbers.\nTest Example: assert sum(10,15) == 6\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to multiply two integers.",
        "answer": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
        "input": "",
        "test": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to multiply two integers.\nTest Example: assert multiply_int(10,20)==200\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find words that are longer than n characters from a given list of words.",
        "answer": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
        "input": "",
        "test": [
            "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
            "assert long_words(2,\"writing a program\")==['writing','program']",
            "assert long_words(5,\"sorting list\")==['sorting']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find words that are longer than n characters from a given list of words.\nTest Example: assert long_words(3,\"python is a programming language\")==['python','programming','language']\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to calculate whether the matrix is a magic square.",
        "answer": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True",
        "input": "",
        "test": [
            "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to calculate whether the matrix is a magic square.\nTest Example: assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the item with maximum frequency in a given list.",
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]",
        "input": "",
        "test": [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
            "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8",
            "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the item with maximum frequency in a given list.\nTest Example: assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
        "answer": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
        "input": "",
        "test": [
            "assert reverse_vowels(\"Python\") == \"Python\"",
            "assert reverse_vowels(\"USA\") == \"ASU\"",
            "assert reverse_vowels(\"ab\") == \"ab\""
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to reverse only the vowels of a given string (where y is not a vowel).\nTest Example: assert reverse_vowels(\"Python\") == \"Python\"\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to convert a tuple to a string.",
        "answer": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
        "input": "",
        "test": [
            "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
            "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
            "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert a tuple to a string.\nTest Example: assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "answer": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
        "input": "",
        "test": [
            "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
            "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
            "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to calculate the sum of the negative numbers of a given list of numbers.\nTest Example: assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the nth hexagonal number.",
        "answer": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ",
        "input": "",
        "test": [
            "assert hexagonal_num(10) == 190",
            "assert hexagonal_num(5) == 45",
            "assert hexagonal_num(7) == 91"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the nth hexagonal number.\nTest Example: assert hexagonal_num(10) == 190\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
        "answer": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)",
        "input": "",
        "test": [
            "assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
            "assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)",
            "assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\nTest Example: assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
        "input": "",
        "test": [
            "assert is_Sum_Of_Powers_Of_Two(10) == True",
            "assert is_Sum_Of_Powers_Of_Two(7) == False",
            "assert is_Sum_Of_Powers_Of_Two(14) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nTest Example: assert is_Sum_Of_Powers_Of_Two(10) == True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the circumference of a circle.",
        "answer": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter",
        "input": "",
        "test": [
            "assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)",
            "assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)",
            "assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the circumference of a circle.\nTest Example: assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to flatten the list of lists into a single set of numbers.",
        "answer": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ",
        "input": "",
        "test": [
            "assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])",
            "assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])",
            "assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to flatten the list of lists into a single set of numbers.\nTest Example: assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to sort a list of elements.",
        "answer": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
        "input": "",
        "test": [
            "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
            "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
            "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to sort a list of elements.\nTest Example: assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to count number items that are identical in the same position of three given lists.",
        "answer": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result",
        "input": "",
        "test": [
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
            "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to count number items that are identical in the same position of three given lists.\nTest Example: assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find number of lists present in the given tuple.",
        "answer": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ",
        "input": "",
        "test": [
            "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
            "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
            "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find number of lists present in the given tuple.\nTest Example: assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the maximum difference between any two elements in a given array.",
        "answer": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
        "input": "",
        "test": [
            "assert max_Abs_Diff((2,1,5,3)) == 4",
            "assert max_Abs_Diff((9,3,2,5,1)) == 8",
            "assert max_Abs_Diff((3,2,1)) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the maximum difference between any two elements in a given array.\nTest Example: assert max_Abs_Diff((2,1,5,3)) == 4\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "answer": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None",
        "input": "",
        "test": [
            "assert find_solution(2, 3, 7) == (2, 1)",
            "assert find_solution(4, 2, 7) == None",
            "assert find_solution(1, 13, 17) == (4, 1)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nTest Example: assert find_solution(2, 3, 7) == (2, 1)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to remove all elements from a given list present in another list.",
        "answer": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result",
        "input": "",
        "test": [
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to remove all elements from a given list present in another list.\nTest Example: assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "answer": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)",
        "input": "",
        "test": [
            "assert sum_series(6) == 12",
            "assert sum_series(10) == 30",
            "assert sum_series(9) == 25"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nTest Example: assert sum_series(6) == 12\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to calculate the area of a regular polygon given the length and number of its sides.",
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area",
        "input": "",
        "test": [
            "assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)",
            "assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)",
            "assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to calculate the area of a regular polygon given the length and number of its sides.\nTest Example: assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "answer": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ",
        "input": "",
        "test": [
            "assert are_equivalent(36, 57) == False",
            "assert are_equivalent(2, 4) == False",
            "assert are_equivalent(23, 47) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to determine if the sum of the divisors of two integers are the same.\nTest Example: assert are_equivalent(36, 57) == False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "answer": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
        "input": "",
        "test": [
            "assert count_char_position(\"xbcefg\") == 2",
            "assert count_char_position(\"ABcED\") == 3",
            "assert count_char_position(\"AbgdeF\") == 5"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nTest Example: assert count_char_position(\"xbcefg\") == 2\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "answer": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
        "input": "",
        "test": [
            "assert find_even_pair([5, 4, 7, 2, 1]) == 4",
            "assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9",
            "assert find_even_pair([1, 2, 3]) == 1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that counts the number of pairs of integers in a list that xor to an even number.\nTest Example: assert find_even_pair([5, 4, 7, 2, 1]) == 4\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the smallest power of 2 greater than or equal to n.",
        "answer": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ",
        "input": "",
        "test": [
            "assert next_power_of_2(0) == 1",
            "assert next_power_of_2(5) == 8",
            "assert next_power_of_2(17) == 32"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the smallest power of 2 greater than or equal to n.\nTest Example: assert next_power_of_2(0) == 1\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to count the number of occurrences of a number in a given list.",
        "answer": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
        "input": "",
        "test": [
            "assert frequency([1,2,3], 4) == 0",
            "assert frequency([1,2,2,3,3,3,4], 3) == 3",
            "assert frequency([0,1,2,3,1,2], 1) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to count the number of occurrences of a number in a given list.\nTest Example: assert frequency([1,2,3], 4) == 0\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ",
        "input": "",
        "test": [
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the sum of numbers in a list within a range specified by two indices.\nTest Example: assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "answer": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter",
        "input": "",
        "test": [
            "assert perimeter_pentagon(5) == 25",
            "assert perimeter_pentagon(10) == 50",
            "assert perimeter_pentagon(15) == 75"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the perimeter of a regular pentagon from the length of its sides.\nTest Example: assert perimeter_pentagon(5) == 25\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "answer": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count",
        "input": "",
        "test": [
            "assert count_occurance(\"letstdlenstdporstd\") == 3",
            "assert count_occurance(\"truststdsolensporsd\") == 1",
            "assert count_occurance(\"makestdsostdworthit\") == 2",
            "assert count_occurance(\"stds\") == 1",
            "assert count_occurance(\"\") == 0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to count the number of occurence of the string 'std' in a given string.\nTest Example: assert count_occurance(\"letstdlenstdporstd\") == 3\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check if all the elements in tuple have same data type or not.",
        "answer": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ",
        "input": "",
        "test": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check if all the elements in tuple have same data type or not.\nTest Example: assert check_type((5, 6, 7, 3, 5, 6) ) == True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "answer": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1",
        "input": "",
        "test": [
            "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
            "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
            "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
            "assert is_majority([1, 1, 2, 2], 5, 1) == False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nTest Example: assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "input": "",
        "test": [
            "assert count_Set_Bits(2) == 1",
            "assert count_Set_Bits(4) == 1",
            "assert count_Set_Bits(6) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nTest Example: assert count_Set_Bits(2) == 1\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to remove the characters which have odd index values of a given string.",
        "answer": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
        "input": "",
        "test": [
            "assert odd_values_string('abcdef') == 'ace'",
            "assert odd_values_string('python') == 'pto'",
            "assert odd_values_string('data') == 'dt'",
            "assert odd_values_string('lambs') == 'lms'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to remove the characters which have odd index values of a given string.\nTest Example: assert odd_values_string('abcdef') == 'ace'\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find minimum of three numbers.",
        "answer": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ",
        "input": "",
        "test": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find minimum of three numbers.\nTest Example: assert min_of_three(10,20,0)==0\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to check whether all the bits are unset in the given range or not.",
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False",
        "input": "",
        "test": [
            "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
            "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
            "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check whether all the bits are unset in the given range or not.\nTest Example: assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "answer": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
        "input": "",
        "test": [
            "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
            "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
            "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nTest Example: assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "answer": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
        "input": "",
        "test": [
            "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
            "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
            "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nTest Example: assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "answer": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest",
        "input": "",
        "test": [
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nTest Example: assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the lateral surface area of a cylinder.",
        "answer": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface",
        "input": "",
        "test": [
            "assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the lateral surface area of a cylinder.\nTest Example: assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the volume of a cube given its side length.",
        "answer": "def volume_cube(l):\n  volume = l * l * l\n  return volume",
        "input": "",
        "test": [
            "assert volume_cube(3)==27",
            "assert volume_cube(2)==8",
            "assert volume_cube(5)==125"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the volume of a cube given its side length.\nTest Example: assert volume_cube(3)==27\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to set all even bits of a given number.",
        "answer": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
        "input": "",
        "test": [
            "assert even_bit_set_number(10) == 10",
            "assert even_bit_set_number(20) == 30",
            "assert even_bit_set_number(30) == 30"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to set all even bits of a given number.\nTest Example: assert even_bit_set_number(10) == 10\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ",
        "input": "",
        "test": [
            "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
            "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
            "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nTest Example: assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to count the number of non-empty substrings of a given string.",
        "answer": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
        "input": "",
        "test": [
            "assert number_of_substrings(\"abc\") == 6",
            "assert number_of_substrings(\"abcd\") == 10",
            "assert number_of_substrings(\"abcde\") == 15"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to count the number of non-empty substrings of a given string.\nTest Example: assert number_of_substrings(\"abc\") == 6\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "answer": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]",
        "input": "",
        "test": [
            "assert get_total_number_of_sequences(10, 4) == 4",
            "assert get_total_number_of_sequences(5, 2) == 6",
            "assert get_total_number_of_sequences(16, 3) == 84"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nTest Example: assert get_total_number_of_sequences(10, 4) == 4\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "answer": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n",
        "input": "",
        "test": [
            "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
            "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
            "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nTest Example: assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to count the total number of characters in a string.",
        "answer": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
        "input": "",
        "test": [
            "assert count_charac(\"python programming\")==18",
            "assert count_charac(\"language\")==8",
            "assert count_charac(\"words\")==5"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to count the total number of characters in a string.\nTest Example: assert count_charac(\"python programming\")==18\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the next perfect square greater than a given number.",
        "answer": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ",
        "input": "",
        "test": [
            "assert next_Perfect_Square(35) == 36",
            "assert next_Perfect_Square(6) == 9",
            "assert next_Perfect_Square(9) == 16"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the next perfect square greater than a given number.\nTest Example: assert next_Perfect_Square(35) == 36\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "answer": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum",
        "input": "",
        "test": [
            "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
            "assert max_sum([80, 60, 30, 40, 20, 10]) == 210",
            "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nTest Example: assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function for computing square roots using the babylonian method.",
        "answer": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;",
        "input": "",
        "test": [
            "assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function for computing square roots using the babylonian method.\nTest Example: assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "answer": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]",
        "input": "",
        "test": [
            "assert lps(\"TENS FOR TENS\") == 5",
            "assert lps(\"CARDIO FOR CARDS\") == 7",
            "assert lps(\"PART OF THE JOURNEY IS PART\") == 9"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the length of the longest palindromic subsequence in the given string.\nTest Example: assert lps(\"TENS FOR TENS\") == 5\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.",
        "answer": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "input": "",
        "test": [
            "assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in an integer n and calculates the harmonic sum of n-1.\nTest Example: assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the intersection of two arrays.",
        "answer": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result",
        "input": "",
        "test": [
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the intersection of two arrays.\nTest Example: assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "answer": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
        "input": "",
        "test": [
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nTest Example: assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "answer": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list",
        "input": "",
        "test": [
            "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
            "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']",
            "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nTest Example: assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to convert complex numbers to polar coordinates.",
        "answer": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ",
        "input": "",
        "test": [
            "assert convert(1) == (1.0, 0.0)",
            "assert convert(4) == (4.0,0.0)",
            "assert convert(5) == (5.0,0.0)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to convert complex numbers to polar coordinates.\nTest Example: assert convert(1) == (1.0, 0.0)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function that returns the number of integer elements in a given list.",
        "answer": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
        "input": "",
        "test": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function that returns the number of integer elements in a given list.\nTest Example: assert count_integer([1,2,'abc',1.2]) == 2\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n",
        "input": "",
        "test": [
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nTest Example: assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "answer": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
        "input": "",
        "test": [
            "assert count_Primes_nums(5) == 2",
            "assert count_Primes_nums(10) == 4",
            "assert count_Primes_nums(100) == 25"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nTest Example: assert count_Primes_nums(5) == 2\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
        "answer": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
        "input": "",
        "test": [
            "assert swap_numbers(10,20)==(20,10)",
            "assert swap_numbers(15,17)==(17,15)",
            "assert swap_numbers(100,200)==(200,100)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\nTest Example: assert swap_numbers(10,20)==(20,10)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to maximize the given two tuples.",
        "answer": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "input": "",
        "test": [
            "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
            "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
            "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to maximize the given two tuples.\nTest Example: assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "answer": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "input": "",
        "test": [
            "assert newman_prime(3) == 7",
            "assert newman_prime(4) == 17",
            "assert newman_prime(5) == 41"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nTest Example: assert newman_prime(3) == 7\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "answer": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "input": "",
        "test": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nTest Example: assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "answer": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]",
        "input": "",
        "test": [
            "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
            "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
            "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nTest Example: assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to calculate a dog's age in dog's years.",
        "answer": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age",
        "input": "",
        "test": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to calculate a dog's age in dog's years.\nTest Example: assert dog_age(12)==61\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "answer": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]",
        "input": "",
        "test": [
            "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
            "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]",
            "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nTest Example: assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the lateral surface area of a cube given its side length.",
        "answer": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA",
        "input": "",
        "test": [
            "assert lateralsurface_cube(5)==100",
            "assert lateralsurface_cube(9)==324",
            "assert lateralsurface_cube(10)==400"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the lateral surface area of a cube given its side length.\nTest Example: assert lateralsurface_cube(5)==100\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "answer": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
        "input": "",
        "test": [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nTest Example: assert square_Sum(2) == 10\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the n'th star number.",
        "answer": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) ",
        "input": "",
        "test": [
            "assert find_star_num(3) == 37",
            "assert find_star_num(4) == 73",
            "assert find_star_num(5) == 121"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the n'th star number.\nTest Example: assert find_star_num(3) == 37\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the ascii value of a character.",
        "answer": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
        "input": "",
        "test": [
            "assert ascii_value('A')==65",
            "assert ascii_value('R')==82",
            "assert ascii_value('S')==83"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the ascii value of a character.\nTest Example: assert ascii_value('A')==65\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the sum of even numbers at even positions of a list.",
        "answer": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
        "input": "",
        "test": [
            "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30",
            "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26",
            "assert sum_even_and_even_index([5, 6, 12, 1]) == 12"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the sum of even numbers at even positions of a list.\nTest Example: assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "answer": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
        "input": "",
        "test": [
            "assert even_Power_Sum(2) == 1056",
            "assert even_Power_Sum(3) == 8832",
            "assert even_Power_Sum(1) == 32"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nTest Example: assert even_Power_Sum(2) == 1056\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "answer": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ",
        "input": "",
        "test": [
            "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
            "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
            "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nTest Example: assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "answer": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ",
        "input": "",
        "test": [
            "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
            "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
            "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nTest Example: assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
        "input": "",
        "test": [
            "assert even_binomial_Coeff_Sum(4) == 8",
            "assert even_binomial_Coeff_Sum(6) == 32",
            "assert even_binomial_Coeff_Sum(2) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nTest Example: assert even_binomial_Coeff_Sum(4) == 8\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
        "answer": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume",
        "input": "",
        "test": [
            "assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in the radius and height of a cylinder and returns the the volume.\nTest Example: assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "answer": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result",
        "input": "",
        "test": [
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nTest Example: assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "answer": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ",
        "input": "",
        "test": [
            "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
            "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
            "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the number of elements that occurs before the tuple element in the given tuple.\nTest Example: assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the nth decagonal number.",
        "answer": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ",
        "input": "",
        "test": [
            "assert is_num_decagonal(3) == 27",
            "assert is_num_decagonal(7) == 175",
            "assert is_num_decagonal(10) == 370"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the nth decagonal number.\nTest Example: assert is_num_decagonal(3) == 27\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "answer": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos",
        "input": "",
        "test": [
            "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
            "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
            "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nTest Example: assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to check if the elements of a given list are unique or not.",
        "answer": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
        "input": "",
        "test": [
            "assert all_unique([1,2,3]) == True",
            "assert all_unique([1,2,1,2]) == False",
            "assert all_unique([1,2,3,4,5]) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check if the elements of a given list are unique or not.\nTest Example: assert all_unique([1,2,3]) == True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to subtract two lists element-wise.",
        "answer": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)",
        "input": "",
        "test": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to subtract two lists element-wise.\nTest Example: assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "answer": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
        "input": "",
        "test": [
            "assert validate(1234) == True",
            "assert validate(51241) == False",
            "assert validate(321) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nTest Example: assert validate(1234) == True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "answer": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element",
        "input": "",
        "test": [
            "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
            "assert check_element([1,2,3,4],7)==False",
            "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nTest Example: assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "answer": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "input": "",
        "test": [
            "assert text_match_two_three(\"ac\")==(False)",
            "assert text_match_two_three(\"dc\")==(False)",
            "assert text_match_two_three(\"abbbba\")==(True)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nTest Example: assert text_match_two_three(\"ac\")==(False)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far",
        "input": "",
        "test": [
            "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
            "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
            "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nTest Example: assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "answer": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
        "input": "",
        "test": [
            "assert square_Sum(2) == 20",
            "assert square_Sum(3) == 56",
            "assert square_Sum(4) == 120"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nTest Example: assert square_Sum(2) == 20\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the list of maximum length in a list of lists.",
        "answer": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)",
        "input": "",
        "test": [
            "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
            "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the list of maximum length in a list of lists.\nTest Example: assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "answer": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]",
        "input": "",
        "test": [
            "assert count_no_of_ways(2, 4) == 16",
            "assert count_no_of_ways(3, 2) == 6",
            "assert count_no_of_ways(4, 4) == 228"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nTest Example: assert count_no_of_ways(2, 4) == 16\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
        "answer": "def find(n,m):  \n    q = n//m \n    return (q)",
        "input": "",
        "test": [
            "assert find(10,3) == 3",
            "assert find(4,2) == 2",
            "assert find(20,5) == 4"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nTest Example: assert find(10,3) == 3\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the third side of a right angled triangle.",
        "answer": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s",
        "input": "",
        "test": [
            "assert otherside_rightangle(7,8)==10.63014581273465",
            "assert otherside_rightangle(3,4)==5",
            "assert otherside_rightangle(7,15)==16.55294535724685"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the third side of a right angled triangle.\nTest Example: assert otherside_rightangle(7,8)==10.63014581273465\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the maximum value in a given heterogeneous list.",
        "answer": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)",
        "input": "",
        "test": [
            "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
            "assert max_val(['Python', 15, 20, 25])==25",
            "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the maximum value in a given heterogeneous list.\nTest Example: assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to return the sum of all divisors of a number.",
        "answer": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)",
        "input": "",
        "test": [
            "assert sum_div(8)==7",
            "assert sum_div(12)==16",
            "assert sum_div(7)==1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to return the sum of all divisors of a number.\nTest Example: assert sum_div(8)==7\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to count inversions in an array.",
        "answer": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ",
        "input": "",
        "test": [
            "assert get_Inv_Count([1,20,6,4,5]) == 5",
            "assert get_Inv_Count([1,2,1]) == 1",
            "assert get_Inv_Count([1,2,5,6,1]) == 3"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to count inversions in an array.\nTest Example: assert get_Inv_Count([1,20,6,4,5]) == 5\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to flatten a given nested list structure.",
        "answer": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ",
        "input": "",
        "test": [
            "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
            "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
            "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to flatten a given nested list structure.\nTest Example: assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])",
        "input": "",
        "test": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to calculate the maximum aggregate from the list of tuples.\nTest Example: assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "answer": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ",
        "input": "",
        "test": [
            "assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nTest Example: assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the depth of a dictionary.",
        "answer": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
        "input": "",
        "test": [
            "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
            "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
            "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the depth of a dictionary.\nTest Example: assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find element at a given index after number of rotations.",
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ",
        "input": "",
        "test": [
            "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
            "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
            "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find element at a given index after number of rotations.\nTest Example: assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to return two words from a list of words starting with letter 'p'.",
        "answer": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
        "input": "",
        "test": [
            "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
            "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
            "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to return two words from a list of words starting with letter 'p'.\nTest Example: assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]",
        "input": "",
        "test": [
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
            "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nTest Example: assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to get a colon of a tuple.",
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon",
        "input": "",
        "test": [
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to get a colon of a tuple.\nTest Example: assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "answer": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result",
        "input": "",
        "test": [
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nTest Example: assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the maximum of two numbers.",
        "answer": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
        "input": "",
        "test": [
            "assert maximum(5,10) == 10",
            "assert maximum(-1,-2) == -1",
            "assert maximum(9,7) == 9"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the maximum of two numbers.\nTest Example: assert maximum(5,10) == 10\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to convert a given string to a tuple of characters.",
        "answer": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
        "input": "",
        "test": [
            "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
            "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert a given string to a tuple of characters.\nTest Example: assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to set the left most unset bit.",
        "answer": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ",
        "input": "",
        "test": [
            "assert set_left_most_unset_bit(10) == 14",
            "assert set_left_most_unset_bit(12) == 14",
            "assert set_left_most_unset_bit(15) == 15"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to set the left most unset bit.\nTest Example: assert set_left_most_unset_bit(10) == 14\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the volume of a cone.",
        "answer": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume",
        "input": "",
        "test": [
            "assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)",
            "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)",
            "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the volume of a cone.\nTest Example: assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "answer": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ",
        "input": "",
        "test": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the highest power of 2 that is less than or equal to n.\nTest Example: assert highest_Power_of_2(10) == 8\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the n'th lucas number.",
        "answer": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
        "input": "",
        "test": [
            "assert find_lucas(9) == 76",
            "assert find_lucas(4) == 7",
            "assert find_lucas(3) == 4"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the n'th lucas number.\nTest Example: assert find_lucas(9) == 76\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to apply a given format string to all of the elements in a list.",
        "answer": "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string",
        "input": "",
        "test": [
            "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
            "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
            "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to apply a given format string to all of the elements in a list.\nTest Example: assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to convert more than one list to nested dictionary.",
        "answer": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result",
        "input": "",
        "test": [
            "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
            "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
            "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert more than one list to nested dictionary.\nTest Example: assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "answer": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
        "input": "",
        "test": [
            "assert get_max_sum(60) == 106",
            "assert get_max_sum(10) == 12",
            "assert get_max_sum(2) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nTest Example: assert get_max_sum(60) == 106\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the list with maximum length.",
        "answer": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)",
        "input": "",
        "test": [
            "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
            "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the list with maximum length.\nTest Example: assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check if given tuple contains no duplicates.",
        "answer": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ",
        "input": "",
        "test": [
            "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
            "assert check_distinct((1, 4, 5, 6)) == True",
            "assert check_distinct((2, 3, 4, 5, 6)) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check if given tuple contains no duplicates.\nTest Example: assert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the first non-repeated character in a given string.",
        "answer": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
        "input": "",
        "test": [
            "assert first_non_repeating_character(\"abcabc\") == None",
            "assert first_non_repeating_character(\"abc\") == \"a\"",
            "assert first_non_repeating_character(\"ababc\") == \"c\""
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the first non-repeated character in a given string.\nTest Example: assert first_non_repeating_character(\"abcabc\") == None\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check whether the given string starts and ends with the same character or not.",
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
        "input": "",
        "test": [
            "assert check_char(\"abba\") == \"Valid\"",
            "assert check_char(\"a\") == \"Valid\"",
            "assert check_char(\"abcd\") == \"Invalid\""
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check whether the given string starts and ends with the same character or not.\nTest Example: assert check_char(\"abba\") == \"Valid\"\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the median of three numbers.",
        "answer": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median",
        "input": "",
        "test": [
            "assert median_numbers(25,55,65)==55.0",
            "assert median_numbers(20,10,30)==20.0",
            "assert median_numbers(15,45,75)==45.0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the median of three numbers.\nTest Example: assert median_numbers(25,55,65)==55.0\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to compute the sum of digits of each number of a given list.",
        "answer": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "input": "",
        "test": [
            "assert sum_of_digits([10,2,56])==14",
            "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
            "assert sum_of_digits([10,20,-4,5,-70])==19"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to compute the sum of digits of each number of a given list.\nTest Example: assert sum_of_digits([10,2,56])==14\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "input": "",
        "test": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to perform the mathematical bitwise xor operation across the given tuples.\nTest Example: assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to extract the number of unique tuples in the given list.",
        "answer": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)",
        "input": "",
        "test": [
            "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
            "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
            "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to extract the number of unique tuples in the given list.\nTest Example: assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "input": "",
        "test": [
            "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
            "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
            "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nTest Example: assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the minimum of two numbers.",
        "answer": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
        "input": "",
        "test": [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the minimum of two numbers.\nTest Example: assert minimum(1,2) == 1\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check whether an element exists within a tuple.",
        "answer": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False",
        "input": "",
        "test": [
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check whether an element exists within a tuple.\nTest Example: assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find whether the parity of a given number is odd.",
        "answer": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
        "input": "",
        "test": [
            "assert find_Parity(12) == False",
            "assert find_Parity(7) == True",
            "assert find_Parity(10) == False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find whether the parity of a given number is odd.\nTest Example: assert find_Parity(12) == False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "answer": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
        "input": "",
        "test": [
            "assert rearrange_bigger(12)==21",
            "assert rearrange_bigger(10)==False",
            "assert rearrange_bigger(102)==120"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to create the next bigger number by rearranging the digits of a given number.\nTest Example: assert rearrange_bigger(12)==21\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs",
        "input": "",
        "test": [
            "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nTest Example: assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "answer": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min",
        "input": "",
        "test": [
            "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
            "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
            "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the minimum product from the pairs of tuples within a given list.\nTest Example: assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the minimum value in a given heterogeneous list.",
        "answer": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
        "input": "",
        "test": [
            "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
            "assert min_val(['Python', 15, 20, 25])==15",
            "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the minimum value in a given heterogeneous list.\nTest Example: assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to convert the given snake case string to camel case string.",
        "answer": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "input": "",
        "test": [
            "assert snake_to_camel('android_tv') == 'AndroidTv'",
            "assert snake_to_camel('google_pixel') == 'GooglePixel'",
            "assert snake_to_camel('apple_watch') == 'AppleWatch'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert the given snake case string to camel case string.\nTest Example: assert snake_to_camel('android_tv') == 'AndroidTv'\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to remove odd numbers from a given list.",
        "answer": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
        "input": "",
        "test": [
            "assert remove_odd([1,2,3]) == [2]",
            "assert remove_odd([2,4,6]) == [2,4,6]",
            "assert remove_odd([10,20,3]) == [10,20]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to remove odd numbers from a given list.\nTest Example: assert remove_odd([1,2,3]) == [2]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to extract the nth element from a given list of tuples.",
        "answer": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result",
        "input": "",
        "test": [
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to extract the nth element from a given list of tuples.\nTest Example: assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
        "answer": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False",
        "input": "",
        "test": [
            "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
            "assert overlapping([1,2,3],[4,5,6]) == False",
            "assert overlapping([1,4,5],[1,4,5]) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check whether any value in a sequence exists in a sequence or not.\nTest Example: assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find a pair with highest product from a given array of integers.",
        "answer": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
        "input": "",
        "test": [
            "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
            "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
            "assert max_Product([1,2,3]) == (2,3)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find a pair with highest product from a given array of integers.\nTest Example: assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find common first element in given list of tuple.",
        "answer": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ",
        "input": "",
        "test": [
            "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
            "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
            "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find common first element in given list of tuple.\nTest Example: assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the element of a list having maximum length.",
        "answer": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
        "input": "",
        "test": [
            "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
            "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
            "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the element of a list having maximum length.\nTest Example: assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "answer": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
        "input": "",
        "test": [
            "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
            "assert round_and_sum([5,2,9,24.3,29])==345",
            "assert round_and_sum([25.0,56.7,89.2])==513"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nTest Example: assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the cube sum of first n even natural numbers.",
        "answer": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
        "input": "",
        "test": [
            "assert cube_Sum(2) == 72",
            "assert cube_Sum(3) == 288",
            "assert cube_Sum(4) == 800"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the cube sum of first n even natural numbers.\nTest Example: assert cube_Sum(2) == 72\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to concatenate each element of tuple by the delimiter.",
        "answer": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
        "input": "",
        "test": [
            "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
            "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
            "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to concatenate each element of tuple by the delimiter.\nTest Example: assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the average of cubes of first n natural numbers.",
        "answer": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
        "input": "",
        "test": [
            "assert find_Average_Of_Cube(2) == 4.5",
            "assert find_Average_Of_Cube(3) == 12",
            "assert find_Average_Of_Cube(1) == 1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the average of cubes of first n natural numbers.\nTest Example: assert find_Average_Of_Cube(2) == 4.5\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to extract only the rear index element of each string in the given tuple.",
        "answer": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ",
        "input": "",
        "test": [
            "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
            "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
            "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to extract only the rear index element of each string in the given tuple.\nTest Example: assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to count the number of sublists containing a particular element.",
        "answer": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr",
        "input": "",
        "test": [
            "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to count the number of sublists containing a particular element.\nTest Example: assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to filter odd numbers.",
        "answer": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
        "input": "",
        "test": [
            "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
            "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
            "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to filter odd numbers.\nTest Example: assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "answer": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "input": "",
        "test": [
            "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
            "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
            "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nTest Example: assert change_date_format(\"2026-01-02\") == '02-01-2026'\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to sort the given array by using shell sort.",
        "answer": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
        "input": "",
        "test": [
            "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
            "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
            "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to sort the given array by using shell sort.\nTest Example: assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "answer": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "input": "",
        "test": [
            "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
            "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
            "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to extract the elementwise and tuples from the given two tuples.\nTest Example: assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the directrix of a parabola.",
        "answer": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix",
        "input": "",
        "test": [
            "assert parabola_directrix(5,3,2)==-198",
            "assert parabola_directrix(9,8,4)==-2336",
            "assert parabola_directrix(2,4,6)==-130"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the directrix of a parabola.\nTest Example: assert parabola_directrix(5,3,2)==-198\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that takes two lists and returns true if they have at least one common element.",
        "answer": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
        "input": "",
        "test": [
            "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
            "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
            "assert common_element(['a','b','c'], ['d','b','e'])==True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes two lists and returns true if they have at least one common element.\nTest Example: assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the median length of a trapezium.",
        "answer": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median",
        "input": "",
        "test": [
            "assert median_trapezium(15,25,35)==20",
            "assert median_trapezium(10,20,30)==15",
            "assert median_trapezium(6,9,4)==7.5"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the median length of a trapezium.\nTest Example: assert median_trapezium(15,25,35)==20\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "answer": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]",
        "input": "",
        "test": [
            "assert check_greater([1, 2, 3, 4, 5], 4) == False",
            "assert check_greater([2, 3, 4, 5, 6], 8) == True",
            "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check whether the entered number is greater than the elements of the given array.\nTest Example: assert check_greater([1, 2, 3, 4, 5], 4) == False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that matches a string that has an a followed by one or more b's.",
        "answer": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
        "input": "",
        "test": [
            "assert text_match_one(\"ac\")==False",
            "assert text_match_one(\"dc\")==False",
            "assert text_match_one(\"abba\")==True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that matches a string that has an a followed by one or more b's.\nTest Example: assert text_match_one(\"ac\")==False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the last digit of a given number.",
        "answer": "def last_Digit(n) :\n    return (n % 10) ",
        "input": "",
        "test": [
            "assert last_Digit(123) == 3",
            "assert last_Digit(25) == 5",
            "assert last_Digit(30) == 0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the last digit of a given number.\nTest Example: assert last_Digit(123) == 3\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to return the negative numbers in a list.",
        "answer": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
        "input": "",
        "test": [
            "assert neg_nos([-1,4,5,-6]) == [-1,-6]",
            "assert neg_nos([-1,-2,3,4]) == [-1,-2]",
            "assert neg_nos([-7,-6,8,9]) == [-7,-6]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to return the negative numbers in a list.\nTest Example: assert neg_nos([-1,4,5,-6]) == [-1,-6]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to remove odd characters in a string.",
        "answer": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
        "input": "",
        "test": [
            "assert remove_odd(\"python\")==(\"yhn\")",
            "assert remove_odd(\"program\")==(\"rga\")",
            "assert remove_odd(\"language\")==(\"agae\")"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to remove odd characters in a string.\nTest Example: assert remove_odd(\"python\")==(\"yhn\")\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to count bidirectional tuple pairs.",
        "answer": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res",
        "input": "",
        "test": [
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3",
            "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2",
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to count bidirectional tuple pairs.\nTest Example: assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to join a list of multiple integers into a single integer.",
        "answer": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x",
        "input": "",
        "test": [
            "assert multiple_to_single([11, 33, 50])==113350",
            "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
            "assert multiple_to_single([10,15,20,25])==10152025"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to join a list of multiple integers into a single integer.\nTest Example: assert multiple_to_single([11, 33, 50])==113350\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the first adverb and their positions in a given sentence.",
        "answer": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))",
        "input": "",
        "test": [
            "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
            "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
            "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the first adverb and their positions in a given sentence.\nTest Example: assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the surface area of a cube of a given size.",
        "answer": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea",
        "input": "",
        "test": [
            "assert surfacearea_cube(5)==150",
            "assert surfacearea_cube(3)==54",
            "assert surfacearea_cube(10)==600"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the surface area of a cube of a given size.\nTest Example: assert surfacearea_cube(5)==150\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the ration of positive numbers in an array of integers.",
        "answer": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
        "input": "",
        "test": [
            "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
            "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
            "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the ration of positive numbers in an array of integers.\nTest Example: assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the largest negative number from the given list.",
        "answer": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
        "input": "",
        "test": [
            "assert largest_neg([1,2,3,-4,-6]) == -6",
            "assert largest_neg([1,2,3,-8,-9]) == -9",
            "assert largest_neg([1,2,3,4,-1]) == -1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the largest negative number from the given list.\nTest Example: assert largest_neg([1,2,3,-4,-6]) == -6\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to trim each tuple by k in the given tuple list.",
        "answer": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ",
        "input": "",
        "test": [
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
            "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to trim each tuple by k in the given tuple list.\nTest Example: assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "answer": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "input": "",
        "test": [
            "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
            "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
            "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nTest Example: assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to count the occurence of all elements of list in a tuple.",
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
        "input": "",
        "test": [
            "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
            "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
            "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to count the occurence of all elements of list in a tuple.\nTest Example: assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find cubes of individual elements in a list.",
        "answer": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
        "input": "",
        "test": [
            "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
            "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
            "assert cube_nums([12,15])==([1728, 3375])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find cubes of individual elements in a list.\nTest Example: assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to calculate the sum of perrin numbers.",
        "answer": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum",
        "input": "",
        "test": [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to calculate the sum of perrin numbers.\nTest Example: assert cal_sum(9) == 49\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to extract specified size of strings from a given list of string values.",
        "answer": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
        "input": "",
        "test": [
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to extract specified size of strings from a given list of string values.\nTest Example: assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to remove all whitespaces from the given string.",
        "answer": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))",
        "input": "",
        "test": [
            "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
            "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
            "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to remove all whitespaces from the given string.\nTest Example: assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "answer": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0",
        "input": "",
        "test": [
            "assert loss_amount(1500,1200)==0",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nTest Example: assert loss_amount(1500,1200)==0\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the sum of even factors of a number.",
        "answer": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
        "input": "",
        "test": [
            "assert sumofFactors(18) == 26",
            "assert sumofFactors(30) == 48",
            "assert sumofFactors(6) == 8"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the sum of even factors of a number.\nTest Example: assert sumofFactors(18) == 26\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function that matches a word containing 'z'.",
        "answer": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "input": "",
        "test": [
            "assert text_match_wordz(\"pythonz.\")==True",
            "assert text_match_wordz(\"xyz.\")==True",
            "assert text_match_wordz(\"  lang  .\")==False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that matches a word containing 'z'.\nTest Example: assert text_match_wordz(\"pythonz.\")==True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check whether the given month number contains 31 days or not.",
        "answer": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False",
        "input": "",
        "test": [
            "assert check_monthnumb_number(5)==True",
            "assert check_monthnumb_number(2)==False",
            "assert check_monthnumb_number(6)==False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check whether the given month number contains 31 days or not.\nTest Example: assert check_monthnumb_number(5)==True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to reverse each string in a given list of string values.",
        "answer": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
        "input": "",
        "test": [
            "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
            "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
            "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to reverse each string in a given list of string values.\nTest Example: assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the sublist having minimum length.",
        "answer": "def Find_Min(lst): \n    return min(lst, key=len) ",
        "input": "",
        "test": [
            "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
            "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
            "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the sublist having minimum length.\nTest Example: assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the area of a rectangle.",
        "answer": "def rectangle_area(l,b):\n  area=l*b\n  return area",
        "input": "",
        "test": [
            "assert rectangle_area(10,20)==200",
            "assert rectangle_area(10,5)==50",
            "assert rectangle_area(4,2)==8"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the area of a rectangle.\nTest Example: assert rectangle_area(10,20)==200\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to remove uppercase substrings from a given string.",
        "answer": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)",
        "input": "",
        "test": [
            "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
            "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
            "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to remove uppercase substrings from a given string.\nTest Example: assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to get the first element of each sublist.",
        "answer": "def Extract(lst): \n    return [item[0] for item in lst] ",
        "input": "",
        "test": [
            "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
            "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
            "assert Extract([[9,8,1],[1,2]]) == [9,1]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to get the first element of each sublist.\nTest Example: assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to count the upper case characters in a given string.",
        "answer": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
        "input": "",
        "test": [
            "assert upper_ctr('PYthon') == 1",
            "assert upper_ctr('BigData') == 1",
            "assert upper_ctr('program') == 0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to count the upper case characters in a given string.\nTest Example: assert upper_ctr('PYthon') == 1\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find all possible combinations of the elements of a given list.",
        "answer": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result",
        "input": "",
        "test": [
            "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
            "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
            "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find all possible combinations of the elements of a given list.\nTest Example: assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the maximum product subarray of the given array.",
        "answer": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far",
        "input": "",
        "test": [
            "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
            "assert max_subarray_product([6, -3, -10, 0, 2]) == 180",
            "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the maximum product subarray of the given array.\nTest Example: assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check if all values are same in a dictionary.",
        "answer": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result",
        "input": "",
        "test": [
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check if all values are same in a dictionary.\nTest Example: assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to drop empty items from a given dictionary.",
        "answer": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1",
        "input": "",
        "test": [
            "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
            "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
            "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to drop empty items from a given dictionary.\nTest Example: assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "answer": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)",
        "input": "",
        "test": [
            "assert max_product([3, 100, 4, 5, 150, 6]) == 3000",
            "assert max_product([4, 42, 55, 68, 80]) == 50265600",
            "assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nTest Example: assert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "answer": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ",
        "input": "",
        "test": [
            "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
            "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
            "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nTest Example: assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the product of the array multiplication modulo n.",
        "answer": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
        "input": "",
        "test": [
            "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9",
            "assert find_remainder([1,1,1],1) == 0",
            "assert find_remainder([1,2,1],2) == 0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the product of the array multiplication modulo n.\nTest Example: assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "answer": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "input": "",
        "test": [
            "assert check_Consecutive([1,2,3,4,5]) == True",
            "assert check_Consecutive([1,2,3,5,6]) == False",
            "assert check_Consecutive([1,2,1]) == False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check whether the given list contains consecutive numbers or not.\nTest Example: assert check_Consecutive([1,2,3,4,5]) == True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "answer": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)",
        "input": "",
        "test": [
            "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
            "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
            "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nTest Example: assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to replace characters in a string.",
        "answer": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
        "input": "",
        "test": [
            "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
            "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
            "assert replace_char(\"python\",'l','a')==(\"python\")"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to replace characters in a string.\nTest Example: assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to sort a dictionary by value.",
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter",
        "input": "",
        "test": [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to sort a dictionary by value.\nTest Example: assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "answer": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
        "input": "",
        "test": [
            "assert big_sum([1,2,3]) == 4",
            "assert big_sum([-1,2,3,4]) == 3",
            "assert big_sum([2,3,6]) == 8"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the sum of the largest and smallest value in a given array.\nTest Example: assert big_sum([1,2,3]) == 4\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to convert the given string to lower case.",
        "answer": "def is_lower(string):\n  return (string.lower())",
        "input": "",
        "test": [
            "assert is_lower(\"InValid\") == \"invalid\"",
            "assert is_lower(\"TruE\") == \"true\"",
            "assert is_lower(\"SenTenCE\") == \"sentence\""
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to convert the given string to lower case.\nTest Example: assert is_lower(\"InValid\") == \"invalid\"\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to remove lowercase substrings from a given string.",
        "answer": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)",
        "input": "",
        "test": [
            "assert remove_lowercase(\"PYTHon\")==('PYTH')",
            "assert remove_lowercase(\"FInD\")==('FID')",
            "assert remove_lowercase(\"STRinG\")==('STRG')"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to remove lowercase substrings from a given string.\nTest Example: assert remove_lowercase(\"PYTHon\")==('PYTH')\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the first digit of a given number.",
        "answer": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
        "input": "",
        "test": [
            "assert first_Digit(123) == 1",
            "assert first_Digit(456) == 4",
            "assert first_Digit(12) == 1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the first digit of a given number.\nTest Example: assert first_Digit(123) == 1\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function which takes a list of integers and only returns the odd ones.",
        "answer": "def Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li",
        "input": "",
        "test": [
            "assert Split([1,2,3,4,5,6]) == [1,3,5]",
            "assert Split([10,11,12,13]) == [11,13]",
            "assert Split([7,8,9,1]) == [7,9,1]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function which takes a list of integers and only returns the odd ones.\nTest Example: assert Split([1,2,3,4,5,6]) == [1,3,5]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "answer": "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  ",
        "input": "",
        "test": [
            "assert difference(3) == 30",
            "assert difference(5) == 210",
            "assert difference(2) == 6"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nTest Example: assert difference(3) == 30\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to count the number of pairs whose xor value is odd.",
        "answer": "def find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  ",
        "input": "",
        "test": [
            "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
            "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
            "assert find_Odd_Pair([1,2,3],3) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to count the number of pairs whose xor value is odd.\nTest Example: assert find_Odd_Pair([5,4,7,2,1],5) == 6\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to toggle the case of all characters in a string.",
        "answer": "def toggle_string(string):\n string1 = string.swapcase()\n return string1",
        "input": "",
        "test": [
            "assert toggle_string(\"Python\")==(\"pYTHON\")",
            "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
            "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to toggle the case of all characters in a string.\nTest Example: assert toggle_string(\"Python\")==(\"pYTHON\")\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the sum of the per-digit difference between two integers.",
        "answer": "def digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))",
        "input": "",
        "test": [
            "assert digit_distance_nums(1,2) == 1",
            "assert digit_distance_nums(23,56) == 6",
            "assert digit_distance_nums(123,256) == 7"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the sum of the per-digit difference between two integers.\nTest Example: assert digit_distance_nums(1,2) == 1\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the sum of the largest contiguous sublist in the given list.",
        "answer": "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far",
        "input": "",
        "test": [
            "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
            "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
            "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the sum of the largest contiguous sublist in the given list.\nTest Example: assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
        "answer": "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) ",
        "input": "",
        "test": [
            "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
            "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
            "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the union of the elements of two given tuples and output them in sorted order.\nTest Example: assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the length of the longest sublists.",
        "answer": "def Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength ",
        "input": "",
        "test": [
            "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
            "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
            "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the length of the longest sublists.\nTest Example: assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to extract values between quotation marks from a string.",
        "answer": "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))",
        "input": "",
        "test": [
            "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
            "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
            "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to extract values between quotation marks from a string.\nTest Example: assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "answer": "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; ",
        "input": "",
        "test": [
            "assert count_Pairs([1,2,1],3) == 2",
            "assert count_Pairs([1,1,1,1],4) == 0",
            "assert count_Pairs([1,2,3,4,5],5) == 10"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nTest Example: assert count_Pairs([1,2,1],3) == 2\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to split a string into characters.",
        "answer": "def split(word): \n    return [char for char in word] ",
        "input": "",
        "test": [
            "assert split('python') == ['p','y','t','h','o','n']",
            "assert split('Name') == ['N','a','m','e']",
            "assert split('program') == ['p','r','o','g','r','a','m']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to split a string into characters.\nTest Example: assert split('python') == ['p','y','t','h','o','n']\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to get the sum of the digits of a non-negative integer.",
        "answer": "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))",
        "input": "",
        "test": [
            "assert sum_digits(345)==12",
            "assert sum_digits(12)==3",
            "assert sum_digits(97)==16"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to get the sum of the digits of a non-negative integer.\nTest Example: assert sum_digits(345)==12\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check whether a specified list is sorted or not.",
        "answer": "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result",
        "input": "",
        "test": [
            "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
            "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
            "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check whether a specified list is sorted or not.\nTest Example: assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to create a list of N empty dictionaries.",
        "answer": "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list",
        "input": "",
        "test": [
            "assert empty_list(5)==[{},{},{},{},{}]",
            "assert empty_list(6)==[{},{},{},{},{},{}]",
            "assert empty_list(7)==[{},{},{},{},{},{},{}]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to create a list of N empty dictionaries.\nTest Example: assert empty_list(5)==[{},{},{},{},{}]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to sort each sublist of strings in a given list of lists.",
        "answer": "def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result",
        "input": "",
        "test": [
            "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
            "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to sort each sublist of strings in a given list of lists.\nTest Example: assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to remove duplicate numbers from a given number of lists.",
        "answer": "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]",
        "input": "",
        "test": [
            "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
            "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
            "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to remove duplicate numbers from a given number of lists.\nTest Example: assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to calculate the product of the unique numbers in a given list.",
        "answer": "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p",
        "input": "",
        "test": [
            "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
            "assert unique_product([1, 2, 3, 1,]) == 6",
            "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to calculate the product of the unique numbers in a given list.\nTest Example: assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the surface area of a cylinder.",
        "answer": "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea",
        "input": "",
        "test": [
            "assert surfacearea_cylinder(10,5)==942.45",
            "assert surfacearea_cylinder(4,5)==226.18800000000002",
            "assert surfacearea_cylinder(4,10)==351.848"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the surface area of a cylinder.\nTest Example: assert surfacearea_cylinder(10,5)==942.45\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to check whether a list is sublist of another or not.",
        "answer": "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; ",
        "input": "",
        "test": [
            "assert is_Sub_Array([1,4,3,5],[1,2]) == False",
            "assert is_Sub_Array([1,2,1],[1,2,1]) == True",
            "assert is_Sub_Array([1,0,2,2],[2,2,0]) ==False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check whether a list is sublist of another or not.\nTest Example: assert is_Sub_Array([1,4,3,5],[1,2]) == False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the last digit in factorial of a given number.",
        "answer": "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0",
        "input": "",
        "test": [
            "assert last_Digit_Factorial(4) == 4",
            "assert last_Digit_Factorial(21) == 0",
            "assert last_Digit_Factorial(30) == 0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the last digit in factorial of a given number.\nTest Example: assert last_Digit_Factorial(4) == 4\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to interleave 3 lists of the same length into a single flat list.",
        "answer": "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result",
        "input": "",
        "test": [
            "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
            "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
            "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to interleave 3 lists of the same length into a single flat list.\nTest Example: assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the dissimilar elements in the given two tuples.",
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) ",
        "input": "",
        "test": [
            "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
            "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
            "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the dissimilar elements in the given two tuples.\nTest Example: assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to remove uneven elements in the nested mixed tuple.",
        "answer": "def even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) ",
        "input": "",
        "test": [
            "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
            "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
            "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to remove uneven elements in the nested mixed tuple.\nTest Example: assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
        "answer": "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) ",
        "input": "",
        "test": [
            "assert surface_Area(3,4) == 33",
            "assert surface_Area(4,5) == 56",
            "assert surface_Area(1,2) == 5"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the surface area of a square pyramid with a given base edge and height.\nTest Example: assert surface_Area(3,4) == 33\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to check if a dictionary is empty",
        "answer": "def my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True",
        "input": "",
        "test": [
            "assert my_dict({10})==False",
            "assert my_dict({11})==False",
            "assert my_dict({})==True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check if a dictionary is empty\nTest Example: assert my_dict({10})==False\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function which returns nth catalan number.",
        "answer": "def catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num",
        "input": "",
        "test": [
            "assert catalan_number(10)==16796",
            "assert catalan_number(9)==4862",
            "assert catalan_number(7)==429"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function which returns nth catalan number.\nTest Example: assert catalan_number(10)==16796\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the first adverb ending with ly and its positions in a given string.",
        "answer": "import re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))",
        "input": "",
        "test": [
            "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
            "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
            "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the first adverb ending with ly and its positions in a given string.\nTest Example: assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find the n most expensive items in a given dataset.",
        "answer": "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items",
        "input": "",
        "test": [
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the n most expensive items in a given dataset.\nTest Example: assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to split a list at the nth eelment and add the first part to the end.",
        "answer": "def split_Arr(l, n):\n  return l[n:] + l[:n]",
        "input": "",
        "test": [
            "assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]",
            "assert split_Arr([1,2,3,4],1) == [2,3,4,1]",
            "assert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to split a list at the nth eelment and add the first part to the end.\nTest Example: assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to convert a list to a tuple.",
        "answer": "def list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex",
        "input": "",
        "test": [
            "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
            "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
            "assert list_tuple([58,44,56])==(58,44,56)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert a list to a tuple.\nTest Example: assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the difference between largest and smallest value in a given list.",
        "answer": "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff",
        "input": "",
        "test": [
            "assert big_diff([1,2,3,4]) == 3",
            "assert big_diff([4,5,12]) == 8",
            "assert big_diff([9,2,3]) == 7"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the difference between largest and smallest value in a given list.\nTest Example: assert big_diff([1,2,3,4]) == 3\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to find perfect squares between two given numbers.",
        "answer": "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists",
        "input": "",
        "test": [
            "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
            "assert perfect_squares(50,100)==[64, 81, 100]",
            "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find perfect squares between two given numbers.\nTest Example: assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to convert polar coordinates to rectangular coordinates.",
        "answer": "import cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)",
        "input": "",
        "test": [
            "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
            "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
            "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert polar coordinates to rectangular coordinates.\nTest Example: assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to interchange the first and last elements in a list.",
        "answer": "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList ",
        "input": "",
        "test": [
            "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
            "assert swap_List([1, 2, 3]) == [3, 2, 1]",
            "assert swap_List([4, 5, 6]) == [6, 5, 4]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to interchange the first and last elements in a list.\nTest Example: assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a python function to find the sum of the product of consecutive binomial co-efficients.",
        "answer": "def binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); ",
        "input": "",
        "test": [
            "assert sum_Of_product(3) == 15",
            "assert sum_Of_product(4) == 56",
            "assert sum_Of_product(1) == 1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the sum of the product of consecutive binomial co-efficients.\nTest Example: assert sum_Of_product(3) == 15\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    },
    {
        "original_question": "Write a function to remove leading zeroes from an ip address.",
        "answer": "import re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n",
        "input": "",
        "test": [
            "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')",
            "assert removezero_ip(\"12.01.024\")==('12.1.24')",
            "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to remove leading zeroes from an ip address.\nTest Example: assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\nThe test is only used to show you the input structure. You do not need to run the test.\n"
    }
]