[
    {
        "original_question": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "answer": "Final Answer:def sum_range_list(numbers, start_index, end_index):\n    return sum(numbers[start_index:end_index + 1])",
        "input": "",
        "test": [
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the sum of numbers in a list within a range specified by two indices.\nTest Example: assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "answer": "Final Answer:def perimeter_pentagon(side_length):\n    return 5 * side_length",
        "input": "",
        "test": [
            "assert perimeter_pentagon(5) == 25",
            "assert perimeter_pentagon(10) == 50",
            "assert perimeter_pentagon(15) == 75"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the perimeter of a regular pentagon from the length of its sides.\nTest Example: assert perimeter_pentagon(5) == 25\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "answer": "Final Answer:def count_occurrence(given_string):\n    return given_string.count('std')",
        "input": "",
        "test": [
            "assert count_occurance(\"letstdlenstdporstd\") == 3",
            "assert count_occurance(\"truststdsolensporsd\") == 1",
            "assert count_occurance(\"makestdsostdworthit\") == 2",
            "assert count_occurance(\"stds\") == 1",
            "assert count_occurance(\"\") == 0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to count the number of occurence of the string 'std' in a given string.\nTest Example: assert count_occurance(\"letstdlenstdporstd\") == 3\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to check if all the elements in tuple have same data type or not.",
        "answer": "Final Answer:def check_type(tup):\n    if not tup:  # Check for empty tuple\n        return True\n    first_type = type(tup[0])\n    return all(type(item) == first_type for item in tup)",
        "input": "",
        "test": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to check if all the elements in tuple have same data type or not.\nTest Example: assert check_type((5, 6, 7, 3, 5, 6) ) == True\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "answer": "Final Answer:def is_majority(arr, n, elem):\n    count = sum(1 for x in arr if x == elem)\n    return count > n / 2",
        "input": "",
        "test": [
            "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
            "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
            "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
            "assert is_majority([1, 1, 2, 2], 5, 1) == False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nTest Example: assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
        "answer": "Final Answer:def count_Set_Bits(n):\n    return bin(n).count('1')",
        "input": "",
        "test": [
            "assert count_Set_Bits(2) == 1",
            "assert count_Set_Bits(4) == 1",
            "assert count_Set_Bits(6) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nTest Example: assert count_Set_Bits(2) == 1\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to remove the characters which have odd index values of a given string.",
        "answer": "Final Answer:def odd_values_string(s):\n    return s[::2]",
        "input": "",
        "test": [
            "assert odd_values_string('abcdef') == 'ace'",
            "assert odd_values_string('python') == 'pto'",
            "assert odd_values_string('data') == 'dt'",
            "assert odd_values_string('lambs') == 'lms'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to remove the characters which have odd index values of a given string.\nTest Example: assert odd_values_string('abcdef') == 'ace'\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find minimum of three numbers.",
        "answer": "Final Answer:def min_of_three(a, b, c):\n    return min(a, b, c)",
        "input": "",
        "test": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find minimum of three numbers.\nTest Example: assert min_of_three(10,20,0)==0\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to check whether all the bits are unset in the given range or not.",
        "answer": "Final Answer:def all_bits_unset_in_the_given_range(n, L, R):\n    mask = ((1 << (R - L + 1)) - 1) << (L - 1)\n    return (n & ~mask) == n\n\nassert all_bits_unset_in_the_given_range(4, 1, 2) == True",
        "input": "",
        "test": [
            "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
            "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
            "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to check whether all the bits are unset in the given range or not.\nTest Example: assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "answer": "Final Answer:def re_arrange_array(arr, n):\n    negative = [arr[i] for i in range(n) if arr[i] < 0]\n    positive = [arr[i] for i in range(n) if arr[i] >= 0]\n    return negative + positive + arr[n:]",
        "input": "",
        "test": [
            "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
            "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
            "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nTest Example: assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "answer": "Final Answer:def replace_blank(input_string, character):\n    return input_string.replace(' ', character)",
        "input": "",
        "test": [
            "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
            "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
            "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nTest Example: assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "answer": "Final Answer:def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]",
        "input": "",
        "test": [
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nTest Example: assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the lateral surface area of a cylinder.",
        "answer": "Final Answer:import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height",
        "input": "",
        "test": [
            "assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the lateral surface area of a cylinder.\nTest Example: assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the volume of a cube given its side length.",
        "answer": "Final Answer:def volume_cube(side_length):\n    return side_length ** 3",
        "input": "",
        "test": [
            "assert volume_cube(3)==27",
            "assert volume_cube(2)==8",
            "assert volume_cube(5)==125"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the volume of a cube given its side length.\nTest Example: assert volume_cube(3)==27\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to set all even bits of a given number.",
        "answer": "Final Answer:def even_bit_set_number(n):\n    return n | 0xAAAAAAAA",
        "input": "",
        "test": [
            "assert even_bit_set_number(10) == 10",
            "assert even_bit_set_number(20) == 30",
            "assert even_bit_set_number(30) == 30"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to set all even bits of a given number.\nTest Example: assert even_bit_set_number(10) == 10\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "answer": "Final Answer:from collections import Counter\n\ndef check_occurences(lst):\n    normalized_tuples = [tuple(sorted(t)) for t in lst]\n    occurrences = Counter(normalized_tuples)\n    return dict(occurrences)",
        "input": "",
        "test": [
            "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
            "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
            "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nTest Example: assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to count the number of non-empty substrings of a given string.",
        "answer": "Final Answer:def number_of_substrings(s):\n    n = len(s)\n    return (n * (n + 1)) // 2",
        "input": "",
        "test": [
            "assert number_of_substrings(\"abc\") == 6",
            "assert number_of_substrings(\"abcd\") == 10",
            "assert number_of_substrings(\"abcde\") == 15"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to count the number of non-empty substrings of a given string.\nTest Example: assert number_of_substrings(\"abc\") == 6\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "answer": "Final Answer:def count_sequences(start, length, max_value):\n    if length == 0:\n        return 1\n    valid_sequences = 0\n    for next_start in range(start * 2, max_value + 1):\n        valid_sequences += count_sequences(next_start, length - 1, max_value)\n    return valid_sequences\n\ndef get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for start in range(1, m // (2 ** (n - 1)) + 1):\n        total_sequences += count_sequences(start, n - 1, m)\n    return total_sequences",
        "input": "",
        "test": [
            "assert get_total_number_of_sequences(10, 4) == 4",
            "assert get_total_number_of_sequences(5, 2) == 6",
            "assert get_total_number_of_sequences(16, 3) == 84"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nTest Example: assert get_total_number_of_sequences(10, 4) == 4\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "answer": "Final Answer:def replace_list(list1, list2):\n    list1 = list1[:-1]\n    list1.extend(list2)\n    return list1",
        "input": "",
        "test": [
            "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
            "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
            "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nTest Example: assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to count the total number of characters in a string.",
        "answer": "Final Answer:def count_charac(s):\n    return len(s)",
        "input": "",
        "test": [
            "assert count_charac(\"python programming\")==18",
            "assert count_charac(\"language\")==8",
            "assert count_charac(\"words\")==5"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to count the total number of characters in a string.\nTest Example: assert count_charac(\"python programming\")==18\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to find the next perfect square greater than a given number.",
        "answer": "Final Answer:import math\ndef next_Perfect_Square(number):\n    root = math.sqrt(number)\n    next_root = math.ceil(root)\n    return next_root ** 2",
        "input": "",
        "test": [
            "assert next_Perfect_Square(35) == 36",
            "assert next_Perfect_Square(6) == 9",
            "assert next_Perfect_Square(9) == 16"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to find the next perfect square greater than a given number.\nTest Example: assert next_Perfect_Square(35) == 36\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "answer": "Final Answer:def max_sum(array):\n    n = len(array)\n    msis = array.copy()  # maximum sum increasing subsequence\n    msds = array.copy()  # maximum sum decreasing subsequence\n\n    # Compute MSIS values from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if array[i] > array[j] and msis[i] < msis[j] + array[i]:\n                msis[i] = msis[j] + array[i]\n\n    # Compute MSDS values from right to left\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if array[i] > array[j] and msds[i] < msds[j] + array[i]:\n                msds[i] = msds[j] + array[i]\n\n    # Pick maximum of msis[i] + msds[i] - array[i]\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, msis[i] + msds[i] - array[i])\n\n    return max_sum_bitonic",
        "input": "",
        "test": [
            "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
            "assert max_sum([80, 60, 30, 40, 20, 10]) == 210",
            "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nTest Example: assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function for computing square roots using the babylonian method.",
        "answer": "Final Answer:def babylonian_squareroot(n):\n    guess = n\n    while True:\n        next_guess = (guess + n / guess) / 2\n        if abs(next_guess - guess) < 1e-10:\n            return next_guess\n        guess = next_guess",
        "input": "",
        "test": [
            "assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function for computing square roots using the babylonian method.\nTest Example: assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "answer": "Final Answer:def lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    return dp[0][n-1]",
        "input": "",
        "test": [
            "assert lps(\"TENS FOR TENS\") == 5",
            "assert lps(\"CARDIO FOR CARDS\") == 7",
            "assert lps(\"PART OF THE JOURNEY IS PART\") == 9"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the length of the longest palindromic subsequence in the given string.\nTest Example: assert lps(\"TENS FOR TENS\") == 5\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.",
        "answer": "Final Answer:import math\n\ndef harmonic_sum(n):\n    sum_harmonic = 0.0\n    for i in range(1, n):\n        sum_harmonic += 1/i\n    return sum_harmonic",
        "input": "",
        "test": [
            "assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in an integer n and calculates the harmonic sum of n-1.\nTest Example: assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the intersection of two arrays.",
        "answer": "Final Answer:def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))",
        "input": "",
        "test": [
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the intersection of two arrays.\nTest Example: assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "answer": "Final Answer:def count_X(tup, element):\n    return tup.count(element)",
        "input": "",
        "test": [
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nTest Example: assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "answer": "Final Answer:def insert_element(lst, elem):\n    result = []\n    for item in lst:\n        result.extend([elem, item])\n    return result",
        "input": "",
        "test": [
            "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
            "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']",
            "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nTest Example: assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to convert complex numbers to polar coordinates.",
        "answer": "Final Answer:import cmath\n\ndef convert(complex_num):\n    if not isinstance(complex_num, complex):\n        complex_num = complex(complex_num, 0)\n    return cmath.polar(complex_num)",
        "input": "",
        "test": [
            "assert convert(1) == (1.0, 0.0)",
            "assert convert(4) == (4.0,0.0)",
            "assert convert(5) == (5.0,0.0)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to convert complex numbers to polar coordinates.\nTest Example: assert convert(1) == (1.0, 0.0)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function that returns the number of integer elements in a given list.",
        "answer": "Final Answer:def count_integer(lst):\n    return sum(isinstance(x, int) for x in lst)",
        "input": "",
        "test": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function that returns the number of integer elements in a given list.\nTest Example: assert count_integer([1,2,'abc',1.2]) == 2\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
        "answer": "Final Answer:from itertools import product\n\ndef combinations_elements(input_list, n):\n    return list(product(input_list, repeat=n))",
        "input": "",
        "test": [
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nTest Example: assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "answer": "Final Answer:def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(is_prime(i) for i in range(2, n))",
        "input": "",
        "test": [
            "assert count_Primes_nums(5) == 2",
            "assert count_Primes_nums(10) == 4",
            "assert count_Primes_nums(100) == 25"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nTest Example: assert count_Primes_nums(5) == 2\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
        "answer": "Final Answer:def swap_numbers(a, b):\n    return (b, a)",
        "input": "",
        "test": [
            "assert swap_numbers(10,20)==(20,10)",
            "assert swap_numbers(15,17)==(17,15)",
            "assert swap_numbers(100,200)==(200,100)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\nTest Example: assert swap_numbers(10,20)==(20,10)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to maximize the given two tuples.",
        "answer": "Final Answer:maximize_elements = lambda x, y: tuple(map(lambda a, b: tuple(map(max, zip(a, b))), x, y))",
        "input": "",
        "test": [
            "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
            "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
            "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to maximize the given two tuples.\nTest Example: assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "answer": "Final Answer:def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    S = [1, 1]\n    primes = []\n    idx = 1\n    while len(primes) < n:\n        idx += 1\n        S.append(2 * S[idx - 1] + S[idx - 2])  \n        if is_prime(S[idx]):\n            primes.append(S[idx])\n    return primes[-1]",
        "input": "",
        "test": [
            "assert newman_prime(3) == 7",
            "assert newman_prime(4) == 17",
            "assert newman_prime(5) == 41"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nTest Example: assert newman_prime(3) == 7\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "answer": "Final Answer:def division_elements(tuple1, tuple2):\n    return tuple(a / b for a, b in zip(tuple1, tuple2))",
        "input": "",
        "test": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nTest Example: assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "answer": "Final Answer:def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])",
        "input": "",
        "test": [
            "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
            "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
            "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nTest Example: assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to calculate a dog's age in dog's years.",
        "answer": "Final Answer:def dog_age(human_years):\n    return 15 + (human_years - 1) * (46 // 11)",
        "input": "",
        "test": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to calculate a dog's age in dog's years.\nTest Example: assert dog_age(12)==61\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "answer": "Final Answer:def list_split(lst, n):\n    result = [[] for _ in range(n)]\n    for index, element in enumerate(lst):\n        sub_list_index = index % n\n        result[sub_list_index].append(element)\n    return result",
        "input": "",
        "test": [
            "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
            "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]",
            "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nTest Example: assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the lateral surface area of a cube given its side length.",
        "answer": "Final Answer:def lateralsurface_cube(s):\n    return 4 * s * s",
        "input": "",
        "test": [
            "assert lateralsurface_cube(5)==100",
            "assert lateralsurface_cube(9)==324",
            "assert lateralsurface_cube(10)==400"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the lateral surface area of a cube given its side length.\nTest Example: assert lateralsurface_cube(5)==100\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "answer": "Final Answer:def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        odd_number = 2 * i - 1\n        sum_of_squares += odd_number**2\n    return sum_of_squares",
        "input": "",
        "test": [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nTest Example: assert square_Sum(2) == 10\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the n'th star number.",
        "answer": "Final Answer:def find_star_num(n):\n    return 6 * n * (n - 1) + 1\n\n# Now let's test the function with the provided assert statement\nassert find_star_num(3) == 37",
        "input": "",
        "test": [
            "assert find_star_num(3) == 37",
            "assert find_star_num(4) == 73",
            "assert find_star_num(5) == 121"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the n'th star number.\nTest Example: assert find_star_num(3) == 37\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the ascii value of a character.",
        "answer": "Final Answer:def ascii_value(char):\n    return ord(char)",
        "input": "",
        "test": [
            "assert ascii_value('A')==65",
            "assert ascii_value('R')==82",
            "assert ascii_value('S')==83"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the ascii value of a character.\nTest Example: assert ascii_value('A')==65\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to find the sum of even numbers at even positions of a list.",
        "answer": "Final Answer:def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0)",
        "input": "",
        "test": [
            "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30",
            "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26",
            "assert sum_even_and_even_index([5, 6, 12, 1]) == 12"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to find the sum of even numbers at even positions of a list.\nTest Example: assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "answer": "Final Answer:def even_Power_Sum(n):\n    sum_of_powers = 0\n    for i in range(1, n+1):\n        sum_of_powers += (2 * i) ** 5\n    return sum_of_powers",
        "input": "",
        "test": [
            "assert even_Power_Sum(2) == 1056",
            "assert even_Power_Sum(3) == 8832",
            "assert even_Power_Sum(1) == 32"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nTest Example: assert even_Power_Sum(2) == 1056\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "answer": "Final Answer:def rear_extract(lst):\n    return [item[-1] for item in lst]",
        "input": "",
        "test": [
            "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
            "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
            "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nTest Example: assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "answer": "Final Answer:def subtract_elements(tup1, tup2):\n    return tuple(a - b for a, b in zip(tup1, tup2))",
        "input": "",
        "test": [
            "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
            "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
            "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nTest Example: assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "answer": "Final Answer:def factorial(num):\n    result = 1\n    for i in range(2, num + 1):\n        result *= i\n    return result\n\ndef comb(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef even_binomial_Coeff_Sum(n):\n    sum_of_even_indices = 0\n    for k in range(0, n+1, 2):\n        sum_of_even_indices += comb(n, k)\n    return sum_of_even_indices",
        "input": "",
        "test": [
            "assert even_binomial_Coeff_Sum(4) == 8",
            "assert even_binomial_Coeff_Sum(6) == 32",
            "assert even_binomial_Coeff_Sum(2) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nTest Example: assert even_binomial_Coeff_Sum(4) == 8\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
        "answer": "Final Answer:import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height",
        "input": "",
        "test": [
            "assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in the radius and height of a cylinder and returns the the volume.\nTest Example: assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "answer": "Final Answer:def dict_filter(input_dict, threshold):\n    return {k: v for k, v in input_dict.items() if v >= threshold}",
        "input": "",
        "test": [
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nTest Example: assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "answer": "Final Answer:def count_first_elements(tup):\n    count = 0\n    for elem in tup:\n        if isinstance(elem, tuple):\n            return count\n        count += 1\n    return count",
        "input": "",
        "test": [
            "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
            "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
            "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the number of elements that occurs before the tuple element in the given tuple.\nTest Example: assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the nth decagonal number.",
        "answer": "Final Answer:def is_num_decagonal(n):\n    return 4*n*n - 3*n",
        "input": "",
        "test": [
            "assert is_num_decagonal(3) == 27",
            "assert is_num_decagonal(7) == 175",
            "assert is_num_decagonal(10) == 370"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the nth decagonal number.\nTest Example: assert is_num_decagonal(3) == 27\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "answer": "Final Answer:def sequential_search(arr, elem):\n    for i, item in enumerate(arr):\n        if item == elem:\n            return True, i\n    return False, -1",
        "input": "",
        "test": [
            "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
            "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
            "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nTest Example: assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to check if the elements of a given list are unique or not.",
        "answer": "Final Answer:def all_unique(lst):\n    return len(lst) == len(set(lst))",
        "input": "",
        "test": [
            "assert all_unique([1,2,3]) == True",
            "assert all_unique([1,2,1,2]) == False",
            "assert all_unique([1,2,3,4,5]) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to check if the elements of a given list are unique or not.\nTest Example: assert all_unique([1,2,3]) == True\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to subtract two lists element-wise.",
        "answer": "Final Answer:def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]",
        "input": "",
        "test": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to subtract two lists element-wise.\nTest Example: assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "answer": "Final Answer:def validate(num):\n    frequency = [0] * 10\n    while num > 0:\n        digit = num % 10\n        frequency[digit] += 1\n        if frequency[digit] > digit:\n            return False\n        num //= 10\n    return True",
        "input": "",
        "test": [
            "assert validate(1234) == True",
            "assert validate(51241) == False",
            "assert validate(321) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nTest Example: assert validate(1234) == True\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "answer": "Final Answer:def check_element(lst, element):\n    return all(item == element for item in lst)",
        "input": "",
        "test": [
            "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
            "assert check_element([1,2,3,4],7)==False",
            "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nTest Example: assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "answer": "Final Answer:import re\n\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "input": "",
        "test": [
            "assert text_match_two_three(\"ac\")==(False)",
            "assert text_match_two_three(\"dc\")==(False)",
            "assert text_match_two_three(\"abbbba\")==(True)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nTest Example: assert text_match_two_three(\"ac\")==(False)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "answer": "Final Answer:def max_sub_array_sum(nums):\n    max_sum = nums[0]\n    current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef max_suffix_sum(nums):\n    max_suffix = 0\n    current_suffix_sum = 0\n    for num in reversed(nums):\n        current_suffix_sum += num\n        max_suffix = max(max_suffix, current_suffix_sum)\n    return max_suffix\n\ndef max_prefix_sum(nums):\n    max_prefix = 0\n    current_prefix_sum = 0\n    for num in nums:\n        current_prefix_sum += num\n        max_prefix = max(max_prefix, current_prefix_sum)\n    return max_prefix\n\ndef max_sub_array_sum_repeated(nums, k):\n    if k == 1:\n        return max_sub_array_sum(nums)\n\n    max_single_sum = max_sub_array_sum(nums)\n    total_sum = sum(nums)\n    max_suffix = max_suffix_sum(nums)\n    max_prefix = max_prefix_sum(nums)\n\n    if total_sum > 0:\n        return max(max_single_sum, max_suffix + total_sum * (k - 2) + max_prefix)\n    else:\n        return max(max_single_sum, max_suffix + max_prefix)",
        "input": "",
        "test": [
            "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
            "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
            "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nTest Example: assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "answer": "Final Answer:def square_Sum(n):\n    return sum(4 * i * i for i in range(1, n + 1))",
        "input": "",
        "test": [
            "assert square_Sum(2) == 20",
            "assert square_Sum(3) == 56",
            "assert square_Sum(4) == 120"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nTest Example: assert square_Sum(2) == 20\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the list of maximum length in a list of lists.",
        "answer": "Final Answer:def max_length(list_of_lists):\n    max_len_list = max(list_of_lists, key=len)\n    max_len = len(max_len_list)\n    return max_len, max_len_list",
        "input": "",
        "test": [
            "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
            "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the list of maximum length in a list of lists.\nTest Example: assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "answer": "Final Answer:def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    same = [0] * (n + 1)\n    diff = [0] * (n + 1)\n\n    same[1], diff[1] = 0, k\n    for i in range(2, n + 1):\n        same[i] = diff[i - 1]\n        diff[i] = (same[i - 1] + diff[i - 1]) * (k - 1)\n\n    return same[n] + diff[n]",
        "input": "",
        "test": [
            "assert count_no_of_ways(2, 4) == 16",
            "assert count_no_of_ways(3, 2) == 6",
            "assert count_no_of_ways(4, 4) == 228"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nTest Example: assert count_no_of_ways(2, 4) == 16\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
        "answer": "Final Answer:def find(a, b):\n    return a // b",
        "input": "",
        "test": [
            "assert find(10,3) == 3",
            "assert find(4,2) == 2",
            "assert find(20,5) == 4"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nTest Example: assert find(10,3) == 3\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the third side of a right angled triangle.",
        "answer": "Final Answer:import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a * a + b * b)",
        "input": "",
        "test": [
            "assert otherside_rightangle(7,8)==10.63014581273465",
            "assert otherside_rightangle(3,4)==5",
            "assert otherside_rightangle(7,15)==16.55294535724685"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the third side of a right angled triangle.\nTest Example: assert otherside_rightangle(7,8)==10.63014581273465\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the maximum value in a given heterogeneous list.",
        "answer": "Final Answer:def max_val(hetero_list): max_value=float('-inf');for item in hetero_list:if isinstance(item, (int, float)) and item > max_value:max_value=item;return max_value",
        "input": "",
        "test": [
            "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
            "assert max_val(['Python', 15, 20, 25])==25",
            "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the maximum value in a given heterogeneous list.\nTest Example: assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to return the sum of all divisors of a number.",
        "answer": "Final Answer:def sum_div(n):\n    return sum(i for i in range(1, n+1) if n % i == 0)",
        "input": "",
        "test": [
            "assert sum_div(8)==7",
            "assert sum_div(12)==16",
            "assert sum_div(7)==1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to return the sum of all divisors of a number.\nTest Example: assert sum_div(8)==7\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to count inversions in an array.",
        "answer": "Final Answer:def merge_sort_counting_inversions(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    else:\n        mid = len(arr) // 2\n        left, inv_left = merge_sort_counting_inversions(arr[:mid])\n        right, inv_right = merge_sort_counting_inversions(arr[mid:])\n        merged, inv_count = merge_and_count(left, right)\n        return merged, inv_left + inv_right + inv_count\n\ndef merge_and_count(a, b):\n    merged = []\n    inversion_count = 0\n    i = j = 0\n    while i < len(a) and j < len(b):\n        if a[i] <= b[j]:\n            merged.append(a[i])\n            i += 1\n        else:\n            merged.append(b[j])\n            inversion_count += (len(a) - i)\n            j += 1\n    merged.extend(a[i:])\n    merged.extend(b[j:])\n    return merged, inversion_count\n\ndef get_Inv_Count(arr):\n    _, inv_count = merge_sort_counting_inversions(arr)\n    return inv_count",
        "input": "",
        "test": [
            "assert get_Inv_Count([1,20,6,4,5]) == 5",
            "assert get_Inv_Count([1,2,1]) == 1",
            "assert get_Inv_Count([1,2,5,6,1]) == 3"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to count inversions in an array.\nTest Example: assert get_Inv_Count([1,20,6,4,5]) == 5\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to flatten a given nested list structure.",
        "answer": "Final Answer:def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list",
        "input": "",
        "test": [
            "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
            "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
            "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to flatten a given nested list structure.\nTest Example: assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "answer": "Final Answer:def max_aggregate(scores):\n    aggregates = {}\n    for name, score in scores:\n        if name in aggregates:\n            aggregates[name] += score\n        else:\n            aggregates[name] = score\n    max_name = max(aggregates, key=aggregates.get)\n    return max_name, aggregates[max_name]",
        "input": "",
        "test": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to calculate the maximum aggregate from the list of tuples.\nTest Example: assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "answer": "Final Answer:import math\n\ndef count_binary_seq(n):\n    count = 0\n    for k in range(n + 1):\n        count += math.comb(n, k) ** 2\n    return count",
        "input": "",
        "test": [
            "assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nTest Example: assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the depth of a dictionary.",
        "answer": "Final Answer:def dict_depth(d, level=1):\n    if not isinstance(d, dict) or not d:\n        return level\n    return max(dict_depth(v, level + 1) for k, v in d.items())",
        "input": "",
        "test": [
            "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
            "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
            "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the depth of a dictionary.\nTest Example: assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to find element at a given index after number of rotations.",
        "answer": "Final Answer:def find_Element(arr, rotations, rotation_to_apply, index):\n    for i in range(min(rotation_to_apply, len(rotations))):\n        start, end = rotations[i]\n        arr = arr[:start] + [arr[end]] + arr[start:end] + arr[end+1:]\n    return arr[index]",
        "input": "",
        "test": [
            "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
            "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
            "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to find element at a given index after number of rotations.\nTest Example: assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to return two words from a list of words starting with letter 'p'.",
        "answer": "Final Answer:def start_withp(word_list):\n    p_words = []\n    for phrase in word_list:\n        words = phrase.split()\n        for word in words:\n            if word.lower().startswith('p') and len(p_words) < 2:\n                p_words.append(word)\n                if len(p_words) == 2:\n                    return tuple(p_words)\n    return tuple(p_words)",
        "input": "",
        "test": [
            "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
            "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
            "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to return two words from a list of words starting with letter 'p'.\nTest Example: assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
        "answer": "Final Answer:def max_sum_increasing_subseq(arr, length, i, k):\n    dp = [0] * i\n    for j in range(i):\n        if arr[j] < arr[k]:\n            dp[j] = arr[j]\n        for l in range(j):\n            if arr[l] < arr[j] and arr[j] < arr[k]:\n                dp[j] = max(dp[j], dp[l] + arr[j])\n    max_sum = max(dp) + arr[k]\n    return max_sum\n\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
        "input": "",
        "test": [
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
            "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nTest Example: assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to get a colon of a tuple.",
        "answer": "Final Answer:def colon_tuplex(tuplex, index, item):\n    tuplex_list = list(tuplex)  # Convert the tuple to a list\n    tuplex_list[index] = tuplex_list[index] + [item]  # Modify the list element by appending the item\n    return tuple(tuplex_list)  # Convert the list back to a tuple",
        "input": "",
        "test": [
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to get a colon of a tuple.\nTest Example: assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "answer": "Final Answer:def large_product(list1, list2, n):\n    import heapq\n    max_heap = [(-x * y, x, y) for x in list1 for y in list2]\n    heapq.heapify(max_heap)\n    largest_products = [-heapq.heappop(max_heap)[0] for _ in range(n)]\n    return largest_products",
        "input": "",
        "test": [
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nTest Example: assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to find the maximum of two numbers.",
        "answer": "Final Answer:def maximum(a, b):\n    return a if a > b else b",
        "input": "",
        "test": [
            "assert maximum(5,10) == 10",
            "assert maximum(-1,-2) == -1",
            "assert maximum(9,7) == 9"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to find the maximum of two numbers.\nTest Example: assert maximum(5,10) == 10\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to convert a given string to a tuple of characters.",
        "answer": "Final Answer:def string_to_tuple(input_string):\n    return tuple(input_string)",
        "input": "",
        "test": [
            "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
            "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to convert a given string to a tuple of characters.\nTest Example: assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to set the left most unset bit.",
        "answer": "Final Answer:def set_left_most_unset_bit(n):\n    flipped = ~n\n    rightmost_set_bit = flipped & -flipped\n    return n | rightmost_set_bit",
        "input": "",
        "test": [
            "assert set_left_most_unset_bit(10) == 14",
            "assert set_left_most_unset_bit(12) == 14",
            "assert set_left_most_unset_bit(15) == 15"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to set the left most unset bit.\nTest Example: assert set_left_most_unset_bit(10) == 14\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the volume of a cone.",
        "answer": "Final Answer:import math\n\ndef volume_cone(radius, height):\n    return (1 / 3) * math.pi * radius**2 * height",
        "input": "",
        "test": [
            "assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)",
            "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)",
            "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the volume of a cone.\nTest Example: assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "answer": "Final Answer:def highest_power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1",
        "input": "",
        "test": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to find the highest power of 2 that is less than or equal to n.\nTest Example: assert highest_Power_of_2(10) == 8\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the n'th lucas number.",
        "answer": "Final Answer:def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for i in range(2, n + 1):\n            a, b = b, a + b\n        return b",
        "input": "",
        "test": [
            "assert find_lucas(9) == 76",
            "assert find_lucas(4) == 7",
            "assert find_lucas(3) == 4"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the n'th lucas number.\nTest Example: assert find_lucas(9) == 76\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to apply a given format string to all of the elements in a list.",
        "answer": "Final Answer:def add_string(elements, format_string):\n    return [format_string.format(e) for e in elements]",
        "input": "",
        "test": [
            "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
            "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
            "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to apply a given format string to all of the elements in a list.\nTest Example: assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to convert more than one list to nested dictionary.",
        "answer": "Final Answer:def convert_list_dictionary(ids, names, scores):\n    return [{id_: {name: score}} for id_, name, score in zip(ids, names, scores)]",
        "input": "",
        "test": [
            "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
            "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
            "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to convert more than one list to nested dictionary.\nTest Example: assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "answer": "Final Answer:def get_max_sum(n, memo={}):\n    if n == 0:\n        return 0\n    if n not in memo:\n        memo[n] = max(get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo), n)\n    return memo[n]",
        "input": "",
        "test": [
            "assert get_max_sum(60) == 106",
            "assert get_max_sum(10) == 12",
            "assert get_max_sum(2) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nTest Example: assert get_max_sum(60) == 106\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the list with maximum length.",
        "answer": "Final Answer:def max_length_list(list_of_lists):\n    max_list = max(list_of_lists, key=len)\n    return len(max_list), max_list",
        "input": "",
        "test": [
            "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
            "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the list with maximum length.\nTest Example: assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to check if given tuple contains no duplicates.",
        "answer": "Final Answer:def check_distinct(tup):\n    return len(tup) == len(set(tup))",
        "input": "",
        "test": [
            "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
            "assert check_distinct((1, 4, 5, 6)) == True",
            "assert check_distinct((2, 3, 4, 5, 6)) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to check if given tuple contains no duplicates.\nTest Example: assert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to find the first non-repeated character in a given string.",
        "answer": "Final Answer:def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
        "input": "",
        "test": [
            "assert first_non_repeating_character(\"abcabc\") == None",
            "assert first_non_repeating_character(\"abc\") == \"a\"",
            "assert first_non_repeating_character(\"ababc\") == \"c\""
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to find the first non-repeated character in a given string.\nTest Example: assert first_non_repeating_character(\"abcabc\") == None\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to check whether the given string starts and ends with the same character or not.",
        "answer": "Final Answer:def check_char(s):\n    return \"Valid\" if s[0] == s[-1] else \"Invalid\"",
        "input": "",
        "test": [
            "assert check_char(\"abba\") == \"Valid\"",
            "assert check_char(\"a\") == \"Valid\"",
            "assert check_char(\"abcd\") == \"Invalid\""
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to check whether the given string starts and ends with the same character or not.\nTest Example: assert check_char(\"abba\") == \"Valid\"\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the median of three numbers.",
        "answer": "Final Answer:def median_numbers(a, b, c):\n    nums = [a, b, c]\n    nums.sort()\n    return float(nums[1])",
        "input": "",
        "test": [
            "assert median_numbers(25,55,65)==55.0",
            "assert median_numbers(20,10,30)==20.0",
            "assert median_numbers(15,45,75)==45.0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the median of three numbers.\nTest Example: assert median_numbers(25,55,65)==55.0\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to compute the sum of digits of each number of a given list.",
        "answer": "Final Answer:def sum_of_digits(numbers):\n    total_sum = 0\n    for number in numbers:\n        for digit in str(number):\n            total_sum += int(digit)\n    return total_sum",
        "input": "",
        "test": [
            "assert sum_of_digits([10,2,56])==14",
            "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
            "assert sum_of_digits([10,20,-4,5,-70])==19"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to compute the sum of digits of each number of a given list.\nTest Example: assert sum_of_digits([10,2,56])==14\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "answer": "Final Answer:def bitwise_xor(tuple1, tuple2):\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))",
        "input": "",
        "test": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to perform the mathematical bitwise xor operation across the given tuples.\nTest Example: assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to extract the number of unique tuples in the given list.",
        "answer": "Final Answer:def extract_freq(tuples_list):\n    unique_tuples = set()\n    for tup in tuples_list:\n        ordered_tup = tuple(sorted(tup))\n        unique_tuples.add(ordered_tup)\n    return len(unique_tuples)",
        "input": "",
        "test": [
            "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
            "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
            "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to extract the number of unique tuples in the given list.\nTest Example: assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "answer": "Final Answer:def add_nested_tuples(tup1, tup2):\n    return tuple(tuple(x + y for x, y in zip(a, b)) for a, b in zip(tup1, tup2))",
        "input": "",
        "test": [
            "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
            "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
            "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nTest Example: assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to find the minimum of two numbers.",
        "answer": "Final Answer:def minimum(a, b):\n    return a if a < b else b",
        "input": "",
        "test": [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to find the minimum of two numbers.\nTest Example: assert minimum(1,2) == 1\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to check whether an element exists within a tuple.",
        "answer": "Final Answer:def check_tuplex(tup, element):\n    return element in tup",
        "input": "",
        "test": [
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to check whether an element exists within a tuple.\nTest Example: assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a python function to find whether the parity of a given number is odd.",
        "answer": "Final Answer:def find_Parity(num):\n    return bin(num).count('1') % 2 != 0",
        "input": "",
        "test": [
            "assert find_Parity(12) == False",
            "assert find_Parity(7) == True",
            "assert find_Parity(10) == False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a python function to find whether the parity of a given number is odd.\nTest Example: assert find_Parity(12) == False\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "answer": "Final Answer:def rearrange_bigger(n):\n    digits = [int(i) for i in str(n)]\n    length = len(digits)\n    i = length - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = length - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i + 1:] = reversed(digits[i + 1:])\n    return int(''.join(map(str, digits)))",
        "input": "",
        "test": [
            "assert rearrange_bigger(12)==21",
            "assert rearrange_bigger(10)==False",
            "assert rearrange_bigger(102)==120"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to create the next bigger number by rearranging the digits of a given number.\nTest Example: assert rearrange_bigger(12)==21\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "answer": "Final Answer:def k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    \n    min_heap = []\n    # Create initial heap from first element of nums1 and all elements of nums2.\n    for j in range(len(nums2)):\n        heapq.heappush(min_heap, (nums1[0] + nums2[j], 0, j))\n\n    result = []\n    # Extract the smallest pairs.\n    while k > 0 and min_heap:\n        _, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        if len(result) == k:\n            break\n        # If there's a next num in nums1, push the pair of it and the current num in nums2.\n        if i + 1 < len(nums1):\n            heapq.heappush(min_heap, (nums1[i + 1] + nums2[j], i + 1, j))\n\n    return result",
        "input": "",
        "test": [
            "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nTest Example: assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    },
    {
        "original_question": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "answer": "Final Answer:def min_product_tuple(tuple_list):\n    return min(a * b for a, b in tuple_list)",
        "input": "",
        "test": [
            "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
            "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
            "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. The test is only used to show you the input structure. You do not need to run the test.\n\n\nTask: Write a function to find the minimum product from the pairs of tuples within a given list.\nTest Example: assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\nProvide your answer directly without any explaination. Please provide the final answer (code) at the end, after 'Final Answer:'\n"
    }
]