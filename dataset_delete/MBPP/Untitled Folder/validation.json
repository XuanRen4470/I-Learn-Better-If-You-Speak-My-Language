[
    {
        "original_question": "Write a function to find the minimum value in a given heterogeneous list.",
        "answer": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
        "input": "",
        "test": [
            "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
            "assert min_val(['Python', 15, 20, 25])==15",
            "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the minimum value in a given heterogeneous list.\nTest Example: assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to convert the given snake case string to camel case string.",
        "answer": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "input": "",
        "test": [
            "assert snake_to_camel('android_tv') == 'AndroidTv'",
            "assert snake_to_camel('google_pixel') == 'GooglePixel'",
            "assert snake_to_camel('apple_watch') == 'AppleWatch'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert the given snake case string to camel case string.\nTest Example: assert snake_to_camel('android_tv') == 'AndroidTv'\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to remove odd numbers from a given list.",
        "answer": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
        "input": "",
        "test": [
            "assert remove_odd([1,2,3]) == [2]",
            "assert remove_odd([2,4,6]) == [2,4,6]",
            "assert remove_odd([10,20,3]) == [10,20]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to remove odd numbers from a given list.\nTest Example: assert remove_odd([1,2,3]) == [2]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to extract the nth element from a given list of tuples.",
        "answer": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result",
        "input": "",
        "test": [
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to extract the nth element from a given list of tuples.\nTest Example: assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
        "answer": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False",
        "input": "",
        "test": [
            "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
            "assert overlapping([1,2,3],[4,5,6]) == False",
            "assert overlapping([1,4,5],[1,4,5]) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check whether any value in a sequence exists in a sequence or not.\nTest Example: assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find a pair with highest product from a given array of integers.",
        "answer": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
        "input": "",
        "test": [
            "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
            "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
            "assert max_Product([1,2,3]) == (2,3)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find a pair with highest product from a given array of integers.\nTest Example: assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find common first element in given list of tuple.",
        "answer": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ",
        "input": "",
        "test": [
            "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
            "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
            "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find common first element in given list of tuple.\nTest Example: assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the element of a list having maximum length.",
        "answer": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
        "input": "",
        "test": [
            "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
            "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
            "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the element of a list having maximum length.\nTest Example: assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "answer": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
        "input": "",
        "test": [
            "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
            "assert round_and_sum([5,2,9,24.3,29])==345",
            "assert round_and_sum([25.0,56.7,89.2])==513"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nTest Example: assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the cube sum of first n even natural numbers.",
        "answer": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
        "input": "",
        "test": [
            "assert cube_Sum(2) == 72",
            "assert cube_Sum(3) == 288",
            "assert cube_Sum(4) == 800"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the cube sum of first n even natural numbers.\nTest Example: assert cube_Sum(2) == 72\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to concatenate each element of tuple by the delimiter.",
        "answer": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
        "input": "",
        "test": [
            "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
            "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
            "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to concatenate each element of tuple by the delimiter.\nTest Example: assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the average of cubes of first n natural numbers.",
        "answer": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
        "input": "",
        "test": [
            "assert find_Average_Of_Cube(2) == 4.5",
            "assert find_Average_Of_Cube(3) == 12",
            "assert find_Average_Of_Cube(1) == 1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the average of cubes of first n natural numbers.\nTest Example: assert find_Average_Of_Cube(2) == 4.5\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to extract only the rear index element of each string in the given tuple.",
        "answer": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ",
        "input": "",
        "test": [
            "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
            "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
            "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to extract only the rear index element of each string in the given tuple.\nTest Example: assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to count the number of sublists containing a particular element.",
        "answer": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr",
        "input": "",
        "test": [
            "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to count the number of sublists containing a particular element.\nTest Example: assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to filter odd numbers.",
        "answer": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
        "input": "",
        "test": [
            "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
            "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
            "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to filter odd numbers.\nTest Example: assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "answer": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "input": "",
        "test": [
            "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
            "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
            "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nTest Example: assert change_date_format(\"2026-01-02\") == '02-01-2026'\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to sort the given array by using shell sort.",
        "answer": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
        "input": "",
        "test": [
            "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
            "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
            "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to sort the given array by using shell sort.\nTest Example: assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "answer": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "input": "",
        "test": [
            "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
            "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
            "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to extract the elementwise and tuples from the given two tuples.\nTest Example: assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the directrix of a parabola.",
        "answer": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix",
        "input": "",
        "test": [
            "assert parabola_directrix(5,3,2)==-198",
            "assert parabola_directrix(9,8,4)==-2336",
            "assert parabola_directrix(2,4,6)==-130"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the directrix of a parabola.\nTest Example: assert parabola_directrix(5,3,2)==-198\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function that takes two lists and returns true if they have at least one common element.",
        "answer": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
        "input": "",
        "test": [
            "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
            "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
            "assert common_element(['a','b','c'], ['d','b','e'])==True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that takes two lists and returns true if they have at least one common element.\nTest Example: assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the median length of a trapezium.",
        "answer": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median",
        "input": "",
        "test": [
            "assert median_trapezium(15,25,35)==20",
            "assert median_trapezium(10,20,30)==15",
            "assert median_trapezium(6,9,4)==7.5"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the median length of a trapezium.\nTest Example: assert median_trapezium(15,25,35)==20\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "answer": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]",
        "input": "",
        "test": [
            "assert check_greater([1, 2, 3, 4, 5], 4) == False",
            "assert check_greater([2, 3, 4, 5, 6], 8) == True",
            "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check whether the entered number is greater than the elements of the given array.\nTest Example: assert check_greater([1, 2, 3, 4, 5], 4) == False\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function that matches a string that has an a followed by one or more b's.",
        "answer": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
        "input": "",
        "test": [
            "assert text_match_one(\"ac\")==False",
            "assert text_match_one(\"dc\")==False",
            "assert text_match_one(\"abba\")==True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that matches a string that has an a followed by one or more b's.\nTest Example: assert text_match_one(\"ac\")==False\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the last digit of a given number.",
        "answer": "def last_Digit(n) :\n    return (n % 10) ",
        "input": "",
        "test": [
            "assert last_Digit(123) == 3",
            "assert last_Digit(25) == 5",
            "assert last_Digit(30) == 0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the last digit of a given number.\nTest Example: assert last_Digit(123) == 3\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to return the negative numbers in a list.",
        "answer": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
        "input": "",
        "test": [
            "assert neg_nos([-1,4,5,-6]) == [-1,-6]",
            "assert neg_nos([-1,-2,3,4]) == [-1,-2]",
            "assert neg_nos([-7,-6,8,9]) == [-7,-6]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to return the negative numbers in a list.\nTest Example: assert neg_nos([-1,4,5,-6]) == [-1,-6]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to remove odd characters in a string.",
        "answer": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
        "input": "",
        "test": [
            "assert remove_odd(\"python\")==(\"yhn\")",
            "assert remove_odd(\"program\")==(\"rga\")",
            "assert remove_odd(\"language\")==(\"agae\")"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to remove odd characters in a string.\nTest Example: assert remove_odd(\"python\")==(\"yhn\")\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to count bidirectional tuple pairs.",
        "answer": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res",
        "input": "",
        "test": [
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3",
            "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2",
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to count bidirectional tuple pairs.\nTest Example: assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to join a list of multiple integers into a single integer.",
        "answer": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x",
        "input": "",
        "test": [
            "assert multiple_to_single([11, 33, 50])==113350",
            "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
            "assert multiple_to_single([10,15,20,25])==10152025"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to join a list of multiple integers into a single integer.\nTest Example: assert multiple_to_single([11, 33, 50])==113350\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the first adverb and their positions in a given sentence.",
        "answer": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))",
        "input": "",
        "test": [
            "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
            "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
            "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the first adverb and their positions in a given sentence.\nTest Example: assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the surface area of a cube of a given size.",
        "answer": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea",
        "input": "",
        "test": [
            "assert surfacearea_cube(5)==150",
            "assert surfacearea_cube(3)==54",
            "assert surfacearea_cube(10)==600"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the surface area of a cube of a given size.\nTest Example: assert surfacearea_cube(5)==150\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the ration of positive numbers in an array of integers.",
        "answer": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
        "input": "",
        "test": [
            "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
            "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
            "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the ration of positive numbers in an array of integers.\nTest Example: assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the largest negative number from the given list.",
        "answer": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
        "input": "",
        "test": [
            "assert largest_neg([1,2,3,-4,-6]) == -6",
            "assert largest_neg([1,2,3,-8,-9]) == -9",
            "assert largest_neg([1,2,3,4,-1]) == -1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the largest negative number from the given list.\nTest Example: assert largest_neg([1,2,3,-4,-6]) == -6\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to trim each tuple by k in the given tuple list.",
        "answer": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ",
        "input": "",
        "test": [
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
            "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to trim each tuple by k in the given tuple list.\nTest Example: assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "answer": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "input": "",
        "test": [
            "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
            "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
            "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nTest Example: assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to count the occurence of all elements of list in a tuple.",
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
        "input": "",
        "test": [
            "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
            "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
            "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to count the occurence of all elements of list in a tuple.\nTest Example: assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find cubes of individual elements in a list.",
        "answer": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
        "input": "",
        "test": [
            "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
            "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
            "assert cube_nums([12,15])==([1728, 3375])"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find cubes of individual elements in a list.\nTest Example: assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to calculate the sum of perrin numbers.",
        "answer": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum",
        "input": "",
        "test": [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to calculate the sum of perrin numbers.\nTest Example: assert cal_sum(9) == 49\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to extract specified size of strings from a given list of string values.",
        "answer": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
        "input": "",
        "test": [
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to extract specified size of strings from a given list of string values.\nTest Example: assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to remove all whitespaces from the given string.",
        "answer": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))",
        "input": "",
        "test": [
            "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
            "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
            "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to remove all whitespaces from the given string.\nTest Example: assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "answer": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0",
        "input": "",
        "test": [
            "assert loss_amount(1500,1200)==0",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nTest Example: assert loss_amount(1500,1200)==0\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the sum of even factors of a number.",
        "answer": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
        "input": "",
        "test": [
            "assert sumofFactors(18) == 26",
            "assert sumofFactors(30) == 48",
            "assert sumofFactors(6) == 8"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the sum of even factors of a number.\nTest Example: assert sumofFactors(18) == 26\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function that matches a word containing 'z'.",
        "answer": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "input": "",
        "test": [
            "assert text_match_wordz(\"pythonz.\")==True",
            "assert text_match_wordz(\"xyz.\")==True",
            "assert text_match_wordz(\"  lang  .\")==False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function that matches a word containing 'z'.\nTest Example: assert text_match_wordz(\"pythonz.\")==True\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to check whether the given month number contains 31 days or not.",
        "answer": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False",
        "input": "",
        "test": [
            "assert check_monthnumb_number(5)==True",
            "assert check_monthnumb_number(2)==False",
            "assert check_monthnumb_number(6)==False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check whether the given month number contains 31 days or not.\nTest Example: assert check_monthnumb_number(5)==True\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to reverse each string in a given list of string values.",
        "answer": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
        "input": "",
        "test": [
            "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
            "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
            "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to reverse each string in a given list of string values.\nTest Example: assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the sublist having minimum length.",
        "answer": "def Find_Min(lst): \n    return min(lst, key=len) ",
        "input": "",
        "test": [
            "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
            "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
            "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the sublist having minimum length.\nTest Example: assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the area of a rectangle.",
        "answer": "def rectangle_area(l,b):\n  area=l*b\n  return area",
        "input": "",
        "test": [
            "assert rectangle_area(10,20)==200",
            "assert rectangle_area(10,5)==50",
            "assert rectangle_area(4,2)==8"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the area of a rectangle.\nTest Example: assert rectangle_area(10,20)==200\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to remove uppercase substrings from a given string.",
        "answer": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)",
        "input": "",
        "test": [
            "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
            "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
            "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to remove uppercase substrings from a given string.\nTest Example: assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to get the first element of each sublist.",
        "answer": "def Extract(lst): \n    return [item[0] for item in lst] ",
        "input": "",
        "test": [
            "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
            "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
            "assert Extract([[9,8,1],[1,2]]) == [9,1]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to get the first element of each sublist.\nTest Example: assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to count the upper case characters in a given string.",
        "answer": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
        "input": "",
        "test": [
            "assert upper_ctr('PYthon') == 1",
            "assert upper_ctr('BigData') == 1",
            "assert upper_ctr('program') == 0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to count the upper case characters in a given string.\nTest Example: assert upper_ctr('PYthon') == 1\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find all possible combinations of the elements of a given list.",
        "answer": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result",
        "input": "",
        "test": [
            "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
            "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
            "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find all possible combinations of the elements of a given list.\nTest Example: assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the maximum product subarray of the given array.",
        "answer": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far",
        "input": "",
        "test": [
            "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
            "assert max_subarray_product([6, -3, -10, 0, 2]) == 180",
            "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the maximum product subarray of the given array.\nTest Example: assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to check if all values are same in a dictionary.",
        "answer": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result",
        "input": "",
        "test": [
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check if all values are same in a dictionary.\nTest Example: assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to drop empty items from a given dictionary.",
        "answer": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1",
        "input": "",
        "test": [
            "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
            "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
            "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to drop empty items from a given dictionary.\nTest Example: assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "answer": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)",
        "input": "",
        "test": [
            "assert max_product([3, 100, 4, 5, 150, 6]) == 3000",
            "assert max_product([4, 42, 55, 68, 80]) == 50265600",
            "assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nTest Example: assert max_product([3, 100, 4, 5, 150, 6]) == 3000\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "answer": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ",
        "input": "",
        "test": [
            "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
            "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
            "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nTest Example: assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the product of the array multiplication modulo n.",
        "answer": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
        "input": "",
        "test": [
            "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9",
            "assert find_remainder([1,1,1],1) == 0",
            "assert find_remainder([1,2,1],2) == 0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the product of the array multiplication modulo n.\nTest Example: assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "answer": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "input": "",
        "test": [
            "assert check_Consecutive([1,2,3,4,5]) == True",
            "assert check_Consecutive([1,2,3,5,6]) == False",
            "assert check_Consecutive([1,2,1]) == False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check whether the given list contains consecutive numbers or not.\nTest Example: assert check_Consecutive([1,2,3,4,5]) == True\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "answer": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)",
        "input": "",
        "test": [
            "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
            "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
            "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nTest Example: assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to replace characters in a string.",
        "answer": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
        "input": "",
        "test": [
            "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
            "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
            "assert replace_char(\"python\",'l','a')==(\"python\")"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to replace characters in a string.\nTest Example: assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to sort a dictionary by value.",
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter",
        "input": "",
        "test": [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to sort a dictionary by value.\nTest Example: assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "answer": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
        "input": "",
        "test": [
            "assert big_sum([1,2,3]) == 4",
            "assert big_sum([-1,2,3,4]) == 3",
            "assert big_sum([2,3,6]) == 8"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the sum of the largest and smallest value in a given array.\nTest Example: assert big_sum([1,2,3]) == 4\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to convert the given string to lower case.",
        "answer": "def is_lower(string):\n  return (string.lower())",
        "input": "",
        "test": [
            "assert is_lower(\"InValid\") == \"invalid\"",
            "assert is_lower(\"TruE\") == \"true\"",
            "assert is_lower(\"SenTenCE\") == \"sentence\""
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to convert the given string to lower case.\nTest Example: assert is_lower(\"InValid\") == \"invalid\"\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to remove lowercase substrings from a given string.",
        "answer": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)",
        "input": "",
        "test": [
            "assert remove_lowercase(\"PYTHon\")==('PYTH')",
            "assert remove_lowercase(\"FInD\")==('FID')",
            "assert remove_lowercase(\"STRinG\")==('STRG')"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to remove lowercase substrings from a given string.\nTest Example: assert remove_lowercase(\"PYTHon\")==('PYTH')\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the first digit of a given number.",
        "answer": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
        "input": "",
        "test": [
            "assert first_Digit(123) == 1",
            "assert first_Digit(456) == 4",
            "assert first_Digit(12) == 1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the first digit of a given number.\nTest Example: assert first_Digit(123) == 1\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function which takes a list of integers and only returns the odd ones.",
        "answer": "def Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li",
        "input": "",
        "test": [
            "assert Split([1,2,3,4,5,6]) == [1,3,5]",
            "assert Split([10,11,12,13]) == [11,13]",
            "assert Split([7,8,9,1]) == [7,9,1]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function which takes a list of integers and only returns the odd ones.\nTest Example: assert Split([1,2,3,4,5,6]) == [1,3,5]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "answer": "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  ",
        "input": "",
        "test": [
            "assert difference(3) == 30",
            "assert difference(5) == 210",
            "assert difference(2) == 6"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nTest Example: assert difference(3) == 30\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to count the number of pairs whose xor value is odd.",
        "answer": "def find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  ",
        "input": "",
        "test": [
            "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
            "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
            "assert find_Odd_Pair([1,2,3],3) == 2"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to count the number of pairs whose xor value is odd.\nTest Example: assert find_Odd_Pair([5,4,7,2,1],5) == 6\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to toggle the case of all characters in a string.",
        "answer": "def toggle_string(string):\n string1 = string.swapcase()\n return string1",
        "input": "",
        "test": [
            "assert toggle_string(\"Python\")==(\"pYTHON\")",
            "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
            "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to toggle the case of all characters in a string.\nTest Example: assert toggle_string(\"Python\")==(\"pYTHON\")\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the sum of the per-digit difference between two integers.",
        "answer": "def digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))",
        "input": "",
        "test": [
            "assert digit_distance_nums(1,2) == 1",
            "assert digit_distance_nums(23,56) == 6",
            "assert digit_distance_nums(123,256) == 7"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the sum of the per-digit difference between two integers.\nTest Example: assert digit_distance_nums(1,2) == 1\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the sum of the largest contiguous sublist in the given list.",
        "answer": "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far",
        "input": "",
        "test": [
            "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
            "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
            "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the sum of the largest contiguous sublist in the given list.\nTest Example: assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
        "answer": "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) ",
        "input": "",
        "test": [
            "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
            "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
            "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the union of the elements of two given tuples and output them in sorted order.\nTest Example: assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the length of the longest sublists.",
        "answer": "def Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength ",
        "input": "",
        "test": [
            "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
            "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
            "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the length of the longest sublists.\nTest Example: assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to extract values between quotation marks from a string.",
        "answer": "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))",
        "input": "",
        "test": [
            "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
            "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
            "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to extract values between quotation marks from a string.\nTest Example: assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "answer": "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; ",
        "input": "",
        "test": [
            "assert count_Pairs([1,2,1],3) == 2",
            "assert count_Pairs([1,1,1,1],4) == 0",
            "assert count_Pairs([1,2,3,4,5],5) == 10"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nTest Example: assert count_Pairs([1,2,1],3) == 2\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to split a string into characters.",
        "answer": "def split(word): \n    return [char for char in word] ",
        "input": "",
        "test": [
            "assert split('python') == ['p','y','t','h','o','n']",
            "assert split('Name') == ['N','a','m','e']",
            "assert split('program') == ['p','r','o','g','r','a','m']"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to split a string into characters.\nTest Example: assert split('python') == ['p','y','t','h','o','n']\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to get the sum of the digits of a non-negative integer.",
        "answer": "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))",
        "input": "",
        "test": [
            "assert sum_digits(345)==12",
            "assert sum_digits(12)==3",
            "assert sum_digits(97)==16"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to get the sum of the digits of a non-negative integer.\nTest Example: assert sum_digits(345)==12\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to check whether a specified list is sorted or not.",
        "answer": "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result",
        "input": "",
        "test": [
            "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
            "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
            "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check whether a specified list is sorted or not.\nTest Example: assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to create a list of N empty dictionaries.",
        "answer": "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list",
        "input": "",
        "test": [
            "assert empty_list(5)==[{},{},{},{},{}]",
            "assert empty_list(6)==[{},{},{},{},{},{}]",
            "assert empty_list(7)==[{},{},{},{},{},{},{}]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to create a list of N empty dictionaries.\nTest Example: assert empty_list(5)==[{},{},{},{},{}]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to sort each sublist of strings in a given list of lists.",
        "answer": "def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result",
        "input": "",
        "test": [
            "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
            "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to sort each sublist of strings in a given list of lists.\nTest Example: assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to remove duplicate numbers from a given number of lists.",
        "answer": "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]",
        "input": "",
        "test": [
            "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
            "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
            "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to remove duplicate numbers from a given number of lists.\nTest Example: assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to calculate the product of the unique numbers in a given list.",
        "answer": "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p",
        "input": "",
        "test": [
            "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
            "assert unique_product([1, 2, 3, 1,]) == 6",
            "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to calculate the product of the unique numbers in a given list.\nTest Example: assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the surface area of a cylinder.",
        "answer": "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea",
        "input": "",
        "test": [
            "assert surfacearea_cylinder(10,5)==942.45",
            "assert surfacearea_cylinder(4,5)==226.18800000000002",
            "assert surfacearea_cylinder(4,10)==351.848"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the surface area of a cylinder.\nTest Example: assert surfacearea_cylinder(10,5)==942.45\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to check whether a list is sublist of another or not.",
        "answer": "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; ",
        "input": "",
        "test": [
            "assert is_Sub_Array([1,4,3,5],[1,2]) == False",
            "assert is_Sub_Array([1,2,1],[1,2,1]) == True",
            "assert is_Sub_Array([1,0,2,2],[2,2,0]) ==False"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to check whether a list is sublist of another or not.\nTest Example: assert is_Sub_Array([1,4,3,5],[1,2]) == False\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the last digit in factorial of a given number.",
        "answer": "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0",
        "input": "",
        "test": [
            "assert last_Digit_Factorial(4) == 4",
            "assert last_Digit_Factorial(21) == 0",
            "assert last_Digit_Factorial(30) == 0"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the last digit in factorial of a given number.\nTest Example: assert last_Digit_Factorial(4) == 4\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to interleave 3 lists of the same length into a single flat list.",
        "answer": "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result",
        "input": "",
        "test": [
            "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
            "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
            "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to interleave 3 lists of the same length into a single flat list.\nTest Example: assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the dissimilar elements in the given two tuples.",
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) ",
        "input": "",
        "test": [
            "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
            "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
            "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the dissimilar elements in the given two tuples.\nTest Example: assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to remove uneven elements in the nested mixed tuple.",
        "answer": "def even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) ",
        "input": "",
        "test": [
            "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
            "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
            "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to remove uneven elements in the nested mixed tuple.\nTest Example: assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
        "answer": "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) ",
        "input": "",
        "test": [
            "assert surface_Area(3,4) == 33",
            "assert surface_Area(4,5) == 56",
            "assert surface_Area(1,2) == 5"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the surface area of a square pyramid with a given base edge and height.\nTest Example: assert surface_Area(3,4) == 33\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to check if a dictionary is empty",
        "answer": "def my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True",
        "input": "",
        "test": [
            "assert my_dict({10})==False",
            "assert my_dict({11})==False",
            "assert my_dict({})==True"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to check if a dictionary is empty\nTest Example: assert my_dict({10})==False\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function which returns nth catalan number.",
        "answer": "def catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num",
        "input": "",
        "test": [
            "assert catalan_number(10)==16796",
            "assert catalan_number(9)==4862",
            "assert catalan_number(7)==429"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function which returns nth catalan number.\nTest Example: assert catalan_number(10)==16796\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the first adverb ending with ly and its positions in a given string.",
        "answer": "import re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))",
        "input": "",
        "test": [
            "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
            "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
            "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the first adverb ending with ly and its positions in a given string.\nTest Example: assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find the n most expensive items in a given dataset.",
        "answer": "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items",
        "input": "",
        "test": [
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find the n most expensive items in a given dataset.\nTest Example: assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to split a list at the nth eelment and add the first part to the end.",
        "answer": "def split_Arr(l, n):\n  return l[n:] + l[:n]",
        "input": "",
        "test": [
            "assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]",
            "assert split_Arr([1,2,3,4],1) == [2,3,4,1]",
            "assert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to split a list at the nth eelment and add the first part to the end.\nTest Example: assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to convert a list to a tuple.",
        "answer": "def list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex",
        "input": "",
        "test": [
            "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
            "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
            "assert list_tuple([58,44,56])==(58,44,56)"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert a list to a tuple.\nTest Example: assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the difference between largest and smallest value in a given list.",
        "answer": "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff",
        "input": "",
        "test": [
            "assert big_diff([1,2,3,4]) == 3",
            "assert big_diff([4,5,12]) == 8",
            "assert big_diff([9,2,3]) == 7"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the difference between largest and smallest value in a given list.\nTest Example: assert big_diff([1,2,3,4]) == 3\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to find perfect squares between two given numbers.",
        "answer": "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists",
        "input": "",
        "test": [
            "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
            "assert perfect_squares(50,100)==[64, 81, 100]",
            "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to find perfect squares between two given numbers.\nTest Example: assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to convert polar coordinates to rectangular coordinates.",
        "answer": "import cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)",
        "input": "",
        "test": [
            "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
            "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
            "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to convert polar coordinates to rectangular coordinates.\nTest Example: assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to interchange the first and last elements in a list.",
        "answer": "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList ",
        "input": "",
        "test": [
            "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
            "assert swap_List([1, 2, 3]) == [3, 2, 1]",
            "assert swap_List([4, 5, 6]) == [6, 5, 4]"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to interchange the first and last elements in a list.\nTest Example: assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a python function to find the sum of the product of consecutive binomial co-efficients.",
        "answer": "def binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); ",
        "input": "",
        "test": [
            "assert sum_Of_product(3) == 15",
            "assert sum_Of_product(4) == 56",
            "assert sum_Of_product(1) == 1"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a python function to find the sum of the product of consecutive binomial co-efficients.\nTest Example: assert sum_Of_product(3) == 15\nAnswer: PUT_YOUR_ANSWER_HERE"
    },
    {
        "original_question": "Write a function to remove leading zeroes from an ip address.",
        "answer": "import re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n",
        "input": "",
        "test": [
            "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')",
            "assert removezero_ip(\"12.01.024\")==('12.1.24')",
            "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')"
        ],
        "question": "You are an expert Python programmer, and you have a computer task. Your code should pass the tests:\n\nHere is your task. You only need to complete this task. Please be careful about whitespace between each line of the code.\nTask: Write a function to remove leading zeroes from an ip address.\nTest Example: assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\nAnswer: PUT_YOUR_ANSWER_HERE"
    }
]